name: Build, Release and Upload

on:
  schedule:
    - cron: 0 0 * * *
  push:
    branches-ignore:
      - gh-pages
    paths:
      - .github/actions/**/*.yml
      - .github/workflows/build.yml
      - .github/*.sh
      - scripts/**
      - '!scripts/dev.sh'
      - patches/**
      - checks/**
      - files/**
      - build.env
  pull_request:
    paths:
      - .github/actions/**/*.yml
      - .github/workflows/build.yml
      - .github/*.sh
      - scripts/**
      - '!scripts/dev.sh'
      - patches/**
      - checks/**
      - files/**
      - build.env
  workflow_dispatch:
    inputs:
      CORE_REF:
        type: string
        required: false
        default: ''
        description: Commit, branch or tag (pi-hole/pi-hole)
      WEB_REF:
        type: string
        required: false
        default: ''
        description: Commit, branch or tag (pi-hole/web)
      FTL_REF:
        type: string
        required: false
        default: ''
        description: Commit, branch or tag (pi-hole/FTL)
      TEST_FTL:
        type: boolean
        required: false
        default: true
        description: Run FTL tests
      NIGHTLY:
        type: boolean
        required: false
        default: false
        description: Is nightly

jobs:
  variables:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'

    env:
      ENV_FILE: ./build.env

    outputs:
      VERSION: ${{ steps.variables.outputs.VERSION }}
      CORE_REF: ${{ steps.variables.outputs.CORE_REF }}
      WEB_REF: ${{ steps.variables.outputs.WEB_REF }}
      FTL_REF: ${{ steps.variables.outputs.FTL_REF }}

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Set outputs
        id: variables
        run: |
          export $(grep -v '^#' ${{ env.ENV_FILE }} | xargs -d '\n')
          export CORE_REF_OVERRIDE=${{ github.event.inputs.CORE_REF }}
          export WEB_REF_OVERRIDE=${{ github.event.inputs.WEB_REF }}
          export FTL_REF_OVERRIDE=${{ github.event.inputs.FTL_REF }}
          bash ./.github/variables.sh
          cat $GITHUB_OUTPUT
          echo "TEST_FTL=${{ github.event.inputs.TEST_FTL || 'true' }}"
          echo "NIGHTLY=${{ github.event.inputs.NIGHTLY || 'false' }}"

  schedule:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    permissions:
      actions: write

    steps:
      - name: Trigger build on develop branch
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build.yml
          ref: develop
          inputs: '{ "NIGHTLY": "true" }'

  build-core:
    concurrency: build-core-${{ github.run_id }}
    needs: [variables]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Checkout pi-hole/pi-hole repository
        uses: actions/checkout@v4
        with:
          repository: pi-hole/pi-hole
          ref: ${{ needs.variables.outputs.CORE_REF }}
          path: ./stage
          fetch-depth: 0
          fetch-tags: true

      - name: Cache result
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: cache
        uses: ./.github/actions/cache
        with:
          key_prefix: core-
          patches_prefix: core
          ref: ${{ github.ref_name }}

      - name: Apply patches
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/patch
        with:
          patches_prefix: core

      - name: List files
        uses: ./.github/actions/list-files
        with:
          paths: ./stage

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: core

  build-web:
    concurrency: build-web-${{ github.run_id }}
    needs: [variables]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Checkout pi-hole/web repository
        uses: actions/checkout@v4
        with:
          repository: pi-hole/web
          ref: ${{ needs.variables.outputs.WEB_REF }}
          path: ./stage
          fetch-depth: 0
          fetch-tags: true

      - name: Cache result
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: cache
        uses: ./.github/actions/cache
        with:
          key_prefix: web-
          patches_prefix: web
          ref: ${{ github.ref_name }}

      - name: Apply patches
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/patch
        with:
          patches_prefix: web

      - name: List files
        uses: ./.github/actions/list-files
        with:
          paths: ./stage

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: web

  build-ftl:
    concurrency: build-ftl-${{ github.run_id }}-${{ matrix.architecture }}
    needs: [variables]
    runs-on: ${{ matrix.machine }}
    continue-on-error: ${{ matrix.allow-failure }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - architecture: amd64
            docker_platform: linux/amd64
            allow-failure: false
            machine: ubuntu-24.04
          - architecture: armv7
            docker_platform: linux/arm/v7
            machine: ubuntu-24.04-arm
            allow-failure: false
          - architecture: arm64
            docker_platform: linux/arm64/v8
            allow-failure: false
            machine: ubuntu-24.04-arm

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Checkout pi-hole/FTL repository
        uses: actions/checkout@v4
        with:
          repository: pi-hole/FTL
          ref: ${{ needs.variables.outputs.FTL_REF }}
          path: ./stage
          fetch-depth: 0
          fetch-tags: true

      - name: Cache result
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        id: cache
        uses: ./.github/actions/cache
        with:
          key_prefix: ftl-${{ matrix.architecture }}-
          patches_prefix: ftl
          ref: ${{ github.ref_name }}
          files: |
            ./stage/pihole-FTL-*
            ./stage/.version

      - name: Apply patches
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/patch
        with:
          patches_prefix: ftl

      - name: Set required variables
        if: steps.cache.outputs.cache-hit != 'true'
        id: variables
        run: |
          source ./stage/.version
          echo "GIT_BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "GIT_TAG=$([ "$BRANCH" = "master" ] && echo "$VERSION" || echo "")" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Build and test FTL
        if: steps.cache.outputs.cache-hit != 'true'
        uses: ./.github/actions/build-ftl
        with:
          platform: ${{ matrix.docker_platform }}
          git_branch: ${{ steps.variables.outputs.GIT_BRANCH }}
          git_tag: ${{ steps.variables.outputs.GIT_TAG }}
          run_tests: ${{ github.event.inputs.TEST_FTL || 'true' }}

      - name: Rename FTL binary and generate checksum file
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./stage
        run: |
          mv pihole-FTL "pihole-FTL-${{ matrix.architecture }}"
          sha1sum pihole-FTL-* > "pihole-FTL-${{ matrix.architecture }}.sha1"

      - name: List files
        uses: ./.github/actions/list-files
        with:
          paths: ./stage

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ftl-${{ matrix.architecture }}
          path: |
            ./stage/pihole-FTL-*
            ./stage/.version

  build-packages:
    concurrency: build-packages-${{ github.run_id }}
    needs: [variables, build-core, build-web, build-ftl]
    runs-on: ubuntu-latest

    outputs:
      IPK_VERSION: ${{ steps.versions.outputs.IPK }}
      CORE_VERSION: ${{ steps.versions.outputs.CORE }}
      WEB_VERSION: ${{ steps.versions.outputs.WEB }}
      FTL_VERSION: ${{ steps.versions.outputs.FTL }}

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Download core artifact
        uses: actions/download-artifact@v4
        with:
          name: core
          path: ./artifacts/core

      - name: Download web artifact
        uses: actions/download-artifact@v4
        with:
          name: web
          path: ./artifacts/web

      - name: Download FTL binary artifact
        uses: actions/download-artifact@v4
        with:
          pattern: ftl-*
          path: ./artifacts/ftl

      - name: Add '-dev' to package name
        id: dev-package
        if: github.ref_name != 'master' && !startsWith(github.ref, 'refs/tags/')
        run: sed '/^Package:/ s/$/-dev/' -i ./files/CONTROL/control

      - name: Build packages
        run: |
          mkdir -p ./build ./packages
          bash ./scripts/multibuild.sh ./build "${{ needs.variables.outputs.VERSION }}" ./artifacts ./packages
          . ./artifacts/core/.version
          echo "CORE=$VERSION" >> ./.versions
          . ./artifacts/web/.version
          echo "WEB=$VERSION" >> ./.versions
          . ./artifacts/ftl/.version
          echo "FTL=$VERSION" >> ./.versions
          cat ./.versions

      - name: List files
        uses: ./.github/actions/list-files
        with:
          paths: ./packages

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ./packages/*

      - name: Check if same '-dev' package was already built
        if: steps.dev-package.outcome == 'success' && github.event.inputs.NIGHTLY == 'true'
        id: dev-check
        uses: ./.github/actions/dev-check

      # Condition in this step decides whenever workflow continues to release/upload or not
      - name: Set versions for release and/or upload
        if: (github.event.inputs.NIGHTLY != 'true' || steps.dev-check.outputs.cache-hit != 'true') && (github.event.inputs.CORE_REF == '' && github.event.inputs.WEB_REF == '' && github.event.inputs.FTL_REF == '') && github.event_name != 'pull_request'
        id: versions
        run: |
          if [ -f ./.versions ]; then
            echo "IPK=${{ needs.variables.outputs.VERSION }}" >> $GITHUB_OUTPUT
            cat ./.versions >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

  release:
    concurrency: release
    needs: [build-packages]
    if: needs.build-packages.outputs.IPK_VERSION != '' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./artifacts

      - name: Create changelog file
        env:
          CORE_VERSION: ${{ needs.build-packages.outputs.CORE_VERSION }}
          WEB_VERSION: ${{ needs.build-packages.outputs.WEB_VERSION }}
          FTL_VERSION: ${{ needs.build-packages.outputs.FTL_VERSION }}
        run: |
          CORE_VERSION_OUT="[$CORE_VERSION](https://github.com/pi-hole/pi-hole/releases/tag/$CORE_VERSION)"
          WEB_VERSION_OUT="[$WEB_VERSION](https://github.com/pi-hole/web/releases/tag/$WEB_VERSION)"
          FTL_VERSION_OUT="[$FTL_VERSION](https://github.com/pi-hole/FTL/releases/tag/$FTL_VERSION)"
          [ "$(echo "$CORE_VERSION" | cut -c1)" != "v" ] && CORE_VERSION_OUT="[$CORE_VERSION](https://github.com/pi-hole/pi-hole/commit/$CORE_VERSION)"
          [ "$(echo "$WEB_VERSION" | cut -c1)" != "v" ] && WEB_VERSION_OUT="[$WEB_VERSION](https://github.com/pi-hole/web/commit/$WEB_VERSION)"
          [ "$(echo "$FTL_VERSION" | cut -c1)" != "v" ] && FTL_VERSION_OUT="[$FTL_VERSION](https://github.com/pi-hole/FTL/commit/$FTL_VERSION)"
          echo "Core version: $CORE_VERSION_OUT  " >> changelog.md
          echo "Web version: $WEB_VERSION_OUT  " >> changelog.md
          echo "FTL version: $FTL_VERSION_OUT  " >> changelog.md
          cat changelog.md

      - name: Create or Edit a release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*/*.ipk
          tag_name: ${{ needs.build-packages.outputs.IPK_VERSION }}
          body_path: changelog.md
          generate_release_notes: true

  upload:
    concurrency: upload
    needs: [build-packages]
    if: needs.build-packages.outputs.IPK_VERSION != '' && (startsWith(github.ref, 'refs/tags/') || github.ref_name == 'develop')
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: /.github/*
          sparse-checkout-cone-mode: false

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: ./gh-pages

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: ./artifacts

      - name: Collect new packages
        run: |
          mkdir -p ./gh-pages
          find ./artifacts -mindepth 1 -maxdepth 1 -type d -name "*-*.*" -exec bash -c '
            [ -z "$(ls -A "$1")" ] && exit
            ARCHITECTURE=$(basename "$1")
            echo "Removing old packages for $ARCHITECTURE"
            if [ "$(find "$1" -maxdepth 1 -type f -name "*-dev_*.ipk" -print -quit)" ]; then
              find "./gh-pages/$ARCHITECTURE" -maxdepth 2 -type f -name "*-dev_*.ipk" -delete -print
            else
              find "./gh-pages/$ARCHITECTURE" -maxdepth 2 -type f \( -name "*.ipk" ! -name "*-dev_*.ipk" \) -delete -print
            fi
          ' bash {} \;
          echo "Copying new packages"
          cp -rv ./artifacts/* ./gh-pages

      - name: Checkout Entware/ipk-html-indexer repository
        uses: actions/checkout@v4
        with:
          repository: Entware/ipk-html-indexer
          path: ./ipk-html-indexer

      - name: Run ipk-html-indexer
        run: |
          sudo ln -s "$(readlink -f ./ipk-html-indexer/mkindex.py)" /usr/local/bin/mkindex.py
          sudo ln -s "$(readlink -f ./ipk-html-indexer/mkhtml.py)" /usr/local/bin/mkhtml.py
          find ./gh-pages -depth \( -type f -name "Packages*" -o -type d -name "css" \) -exec rm -fr "{}" \;
          find ./gh-pages -mindepth 1 -maxdepth 1 -type d -name "*-*.*" -exec bash -c '
            bash ./ipk-html-indexer/index_feed.sh -h -f "$1"
            sed "s#href=\"/css#href=\"../css#" -i "$1/Packages.html"
          ' bash {} \;
          cp -fr ./ipk-html-indexer/css ./gh-pages

      - name: Cleanup gh-pages directory
        run: |
          find ./gh-pages -mindepth 1 -maxdepth 1 -type d -regextype sed \( ! -regex '.*/[[:alnum:]]*-k[0-9]*\.[0-9]*$' ! -name ".git" ! -name "css" \) -exec rm -frv "{}" \;
          find ./gh-pages -mindepth 1 -maxdepth 1 -type f ! -name "Packages*" -exec rm -fv "{}" \;

      - name: Create directory listings
        uses: ./.github/actions/generate-directory-listings
        with:
          path: ./gh-pages
          ignored: css

      - name: List files
        uses: ./.github/actions/list-files
        with:
          paths: . ./artifacts ./gh-pages ./gh-pages/*

      - name: Prepare for upload
        run: |
          find . -mindepth 1 -maxdepth 1 \( ! -name "gh-pages" -type d -exec rm -fr "{}" \; \) -o \( -type f -exec rm -f "{}" \; \)
          shopt -s dotglob && mv -v ./gh-pages/* .
          git branch -m gh-pages gh-pages.old || true
          ls -aAlv --group-directories-first . || true

      - name: Upload packages
        if: startsWith(github.ref, 'refs/tags/') || github.ref_name == 'develop'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: .
          commit-message: Upload
          single-commit: true
          force: true
          git-config-name: 'github-actions[bot]'
          git-config-email: '41898282+github-actions[bot]@users.noreply.github.com'
