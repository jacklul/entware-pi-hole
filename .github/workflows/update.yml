name: Auto Update

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  ENV_FILE: ./build.env

jobs:
  check:
    concurrency: check
    runs-on: ubuntu-latest

    outputs:
      CORE_HASH: ${{ steps.new-hashes.outputs.CORE_HASH }}
      WEB_HASH: ${{ steps.new-hashes.outputs.WEB_HASH }}
      FTL_HASH: ${{ steps.new-hashes.outputs.FTL_HASH }}
      STATUS: ${{ steps.status.outputs.RESULT }}

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Set branches to pull
        id: branches
        run: |
          export $(grep -v '^#' ${{ env.ENV_FILE }} | xargs -d '\n')
          echo "CORE=$CORE_BRANCH" >> $GITHUB_OUTPUT
          echo "WEB=$WEB_BRANCH" >> $GITHUB_OUTPUT
          echo "FTL=$FTL_BRANCH" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Checkout pi-hole/pi-hole repository
        uses: actions/checkout@v4
        with:
          repository: pi-hole/pi-hole
          ref: ${{ steps.branches.outputs.CORE }}
          path: ./dev/core

      - name: Checkout pi-hole/web repository
        uses: actions/checkout@v4
        with:
          repository: pi-hole/web
          ref: ${{ steps.branches.outputs.WEB }}
          path: ./dev/web

      - name: Checkout pi-hole/FTL repository
        uses: actions/checkout@v4
        with:
          repository: pi-hole/FTL
          ref: ${{ steps.branches.outputs.FTL }}
          path: ./dev/FTL

      - name: Set old hashes
        id: old-hashes
        run: |
          echo "CORE_HASH=$(sed -n 's/^CORE_REF=\([[:alnum:]]*\)\s*$/\1/p' ${{ env.ENV_FILE }})" >> $GITHUB_OUTPUT
          echo "WEB_HASH=$(sed -n 's/^WEB_REF=\([[:alnum:]]*\)\s*$/\1/p' ${{ env.ENV_FILE }})" >> $GITHUB_OUTPUT
          echo "FTL_HASH=$(sed -n 's/^FTL_REF=\([[:alnum:]]*\)\s*$/\1/p' ${{ env.ENV_FILE }})" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Set new hashes
        id: new-hashes
        run: |
          echo "CORE_HASH=$(git -C ./dev/core rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "WEB_HASH=$(git -C ./dev/web rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "FTL_HASH=$(git -C ./dev/FTL rev-parse HEAD)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Old hashes are not empty
        id: hashes-not-empty
        if: ${{ steps.old-hashes.outputs.CORE_HASH != '' && steps.old-hashes.outputs.WEB_HASH != '' && steps.old-hashes.outputs.FTL_HASH != '' }}
        run: echo "RESULT=ok" >> $GITHUB_OUTPUT

      - name: At least one hash is different
        id: hashes-different
        if: ${{ steps.hashes-not-empty.outputs.RESULT == 'ok' && ( steps.old-hashes.outputs.CORE_HASH != steps.new-hashes.outputs.CORE_HASH || steps.old-hashes.outputs.WEB_HASH != steps.new-hashes.outputs.WEB_HASH || steps.old-hashes.outputs.FTL_HASH != steps.new-hashes.outputs.FTL_HASH ) }}
        run: echo "RESULT=ok" >> $GITHUB_OUTPUT

      - name: Apply patches (core)
        id: patch-core
        if: ${{ steps.hashes-different.outputs.RESULT == 'ok' }}
        uses: ./.github/actions/patch
        with:
          patches_prefix: core
          git_path: ./dev/core

      - name: Apply patches (web)
        id: patch-web
        if: ${{ steps.hashes-different.outputs.RESULT == 'ok' }}
        uses: ./.github/actions/patch
        with:
          patches_prefix: web
          git_path: ./dev/web

      - name: Apply patches (FTL)
        id: patch-FTL
        if: ${{ steps.hashes-different.outputs.RESULT == 'ok' }}
        uses: ./.github/actions/patch
        with:
          patches_prefix: FTL
          git_path: ./dev/FTL

      - name: Set up Docker Buildx
        if: ${{ steps.patch-FTL.outputs.RESULT == 'ok' }}
        uses: docker/setup-buildx-action@v3

      - name: Build and test FTL
        if: ${{ steps.patch-FTL.outputs.RESULT == 'ok' }}
        uses: docker/build-push-action@v5
        env:
          platform: linux/amd64
        with:
          platforms: ${{ env.platform }}
          pull: true
          push: false
          context: ./dev/FTL
          target: result
          file: ./dev/FTL/.github/Dockerfile
          outputs: |
            type=tar,dest=./dev/FTL/build.tar
          build-args: |
            "CI_ARCH=${{ env.platform }}"
            "GIT_BRANCH=${{ steps.branches.outputs.FTL }}"
            "GIT_TAG="

      - name: Set ok status
        if: ${{ steps.hashes-different.outputs.RESULT == 'ok' }}
        id: status
        run: echo "RESULT=ok" >> $GITHUB_OUTPUT

  update:
    concurrency: update
    needs: [check]
    if: ${{ needs.check.outputs.STATUS == 'ok' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Replace hashes in env file
        run: |
          sed 's/CORE_REF=.*$/CORE_REF=${{ needs.check.outputs.CORE_HASH }}/' -i ${{ env.ENV_FILE }}
          sed 's/WEB_REF=.*$/WEB_REF=${{ needs.check.outputs.WEB_HASH }}/' -i ${{ env.ENV_FILE }}
          sed 's/FTL_REF=.*$/FTL_REF=${{ needs.check.outputs.FTL_HASH }}/' -i ${{ env.ENV_FILE }}

      - name: Is repository modified?
        id: modified
        run: echo "RESULT=$([ "$(git diff)" != "" ] && echo yes || echo no)" >> $GITHUB_OUTPUT

      - name: Create suggested tag name
        if: ${{ steps.modified.outputs.RESULT == 'yes' }}
        id: tag
        run: |
          bash -c '
            REVISION=0
            TAG=""
            LIMIT=100
            while [ "$TAG" = "" ] || git tag | grep -q "$TAG"; do
                REVISION=$((REVISION+1))
                TAG=$(date +%Y.%m.%d)-$REVISION
                LIMIT=$((LIMIT-1))
                [ $LIMIT -le 0 ] && exit 1
            done
            echo "RESULT=$TAG" >> $GITHUB_OUTPUT
            echo "$TAG"
          '

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        if: ${{ steps.tag.outputs.RESULT != '' && (github.event_name == 'schedule' || github.ref_name == 'master') }}
        with:
          branch: auto-update-pull-request
          delete-branch: true
          commit-message: 'Automatic update to ${{ steps.tag.outputs.RESULT }}'
          title: 'Automatic update to ${{ steps.tag.outputs.RESULT }}'
          body: ''
