name: Build, Test and Extract FTL binary

inputs:
  platform:
    required: true
  git_branch:
    required: false
    default: ''
  git_tag:
    required: false
    default: ''
  context:
    required: false
    default: ./stage
  dockerfile:
    required: false
    default: ./stage/.github/Dockerfile
  build_opts:
    required: false
    default: ''
  run_tests:
    required: false
    default: true
  extract_binary:
    required: false
    default: true

runs:
  using: composite

  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # @TODO remove after new FTL release
    - name: Fix for building v6.2.3 on new workflow
      id: old
      shell: bash
      run: |
        if git -C "${{ inputs.context }}" rev-parse HEAD | grep -q '88737f6248cd3df3202eed72aeec89b9fb572631'; then
          echo "USE=true" >> $GITHUB_OUTPUT
        fi

    - name: Build FTL 
      if: steps.old.outputs.USE != 'true'
      id: build
      shell: bash
      run: |
        docker buildx build \
          --platform ${{ inputs.platform }} \
          --pull \
          --load \
          --build-arg "CI_ARCH=${{ inputs.platform }}" \
          --build-arg "GIT_BRANCH=${{ inputs.git_branch }}" \
          --build-arg "GIT_TAG=${{ inputs.git_tag }}" \
          --build-arg "BUILD_OPTS=${{ inputs.build_opts }}" \
          --tag ftl-builder:local \
          --file "${{ inputs.dockerfile }}" "${{ inputs.context }}"

    - name: Test FTL
      if: inputs.run_tests == 'true' && steps.build.outcome == 'success' && steps.old.outputs.USE != 'true'
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        docker run --rm \
          --platform ${{ inputs.platform }} \
          --env CI_ARCH=${{ inputs.platform }} \
          --env BUILD_OPTS=${{ inputs.build_opts }} \
          --env STATIC=true \
          ftl-builder:local \
          /bin/bash -c "test/arch_test.sh && test/run.sh"

    - name: Extract FTL binary
      if: inputs.extract_binary == 'true' && steps.build.outcome == 'success' && steps.old.outputs.USE != 'true'
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        docker create --platform ${{ inputs.platform }} --name temp-container ftl-builder:local
        docker cp temp-container:/pihole-FTL ./pihole-FTL
        docker rm temp-container

    # @TODO remove after new FTL release, don't forget about conditions 'steps.old.outputs.USE' above!
    - name: Build FTL (old release)
      if: steps.old.outputs.USE == 'true'
      id: build-old
      uses: docker/build-push-action@v5
      env:
        DOCKER_BUILD_SUMMARY: false
      with:
        platforms: "${{ inputs.platform }}"
        pull: true
        push: false
        context: "${{ inputs.context }}"
        target: result
        file: "${{ inputs.dockerfile }}"
        outputs: |
          type=tar,dest=${{ inputs.context }}/build.tar
        build-args: |
          "CI_ARCH=${{ inputs.platform }}"
          "GIT_BRANCH=${{ inputs.git_branch }}"
          "GIT_TAG=${{ inputs.git_tag }}"
          "BUILD_OPTS=${{ inputs.build_opts }}"

    - name: Test FTL (old release)
      if: inputs.run_tests == 'true' && steps.build-old.outcome == 'success' && steps.old.outputs.USE == 'true'
      uses: docker/build-push-action@v5
      env:
        DOCKER_BUILD_SUMMARY: false
      with:
        platforms: "${{ inputs.platform }}"
        pull: true
        push: false
        context: "${{ inputs.context }}"
        target: tests
        file: "${{ inputs.dockerfile }}"
        build-args: |
          "CI_ARCH=${{ inputs.platform }}"

    - name: Extract FTL binary (old release)
      if: inputs.extract_binary == 'true' && steps.build-old.outcome == 'success' && steps.old.outputs.USE == 'true'
      working-directory: ${{ inputs.context }}
      shell: bash
      run: |
        [ -f ./build.tar ] && tar -xf ./build.tar pihole-FTL
