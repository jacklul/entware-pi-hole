#!/bin/sh

# Prioritize /opt binaries
PATH="/opt/sbin:/opt/bin:$PATH:/opt/share/pihole/polyfill"

# Fancy console output
if [ -f /opt/share/pihole/COL_TABLE ]; then
    #shellcheck source=../../dev/core/advanced/Scripts/COL_TABLE
    . "/opt/share/pihole/COL_TABLE"
else
    TICK="[âœ“]"
    CROSS="[âœ—]"
    INFO="[i]"
    OVER="\\r[K"
fi

random_number() {
    _base=$1
    _max=$2

    bash -c "echo \$(($_base + RANDOM % $_max))"
}

gravitydb_version() {
    pihole-FTL sqlite3 -ni "$1" "SELECT \"value\" FROM \"info\" WHERE \"property\" = 'version';" || echo 0
}

run_service_action() {
    case "$1" in
        "start")
            _str="Starting pihole-FTL service"
        ;;
        "restart")
            _str="Restarting pihole-FTL service"
        ;;
    esac

    if [ -n "$_str" ]; then
        printf "  %s %s..." "${INFO}" "$_str"

        if /opt/etc/init.d/S65pihole-FTL "$1" > /dev/null; then
            printf "%b  %b %s...\\n" "${OVER}" "${TICK}" "$_str"
        else
            printf "%b  %b %s...\\n" "${OVER}" "${CROSS}" "$_str"
        fi
    fi
}

##########

echo "  ${INFO} ${COL_BOLD}Running Pi-hole install/upgrade tasks...${COL_NC}"

# Make links to system files if they don't exist in /opt/etc
[ ! -f /opt/etc/hosts ] && [ -f /etc/hosts ] && ln -s /etc/hosts /opt/etc/hosts && symlinks="$symlinks /opt/etc/hosts"
[ ! -f /opt/etc/ethers ] && [ -f /etc/ethers ] && ln -s /etc/ethers /opt/etc/ethers && symlinks="$symlinks /opt/etc/ethers"
[ ! -f /opt/etc/resolv.conf ] && [ -f /etc/resolv.conf ] && ln -s /etc/resolv.conf /opt/etc/resolv.conf && symlinks="$symlinks /opt/etc/resolv.conf"
[ -n "$symlinks" ] && echo "  ${INFO} Created symlinks:$symlinks"

# Set random gravity update and updatechecker times
if [ -f /opt/etc/cron.d/pihole ] && grep -q "59 1 \|59 17 " /opt/etc/cron.d/pihole; then
    echo "  ${INFO} Setting random gravity update and updatechecker times..."

    sed "s/59 1 /$(random_number 1 58) $(random_number 3 2) /" -i /opt/etc/cron.d/pihole
    sed "s/59 17 /$(random_number 1 58) $(random_number 12 8) /" -i /opt/etc/cron.d/pihole
fi

# Set user and group used for rotating the logs by logrotate
if [ -f /opt/etc/pihole/logrotate ]; then
    log_user_group="$(stat -c '%U %G' /opt/var/log)"

    if [ -n "$log_user_group" ]; then
        echo "  ${INFO} Setting user and group in logrotate file..."

        if grep -q "# su #" /opt/etc/pihole/logrotate; then
            sed "s/# su #/su $log_user_group/g;" -i /opt/etc/pihole/logrotate
        else
            sed "s/su.*$/su $log_user_group/g;" -i /opt/etc/pihole/logrotate
        fi
    fi
fi

# Apply possible workarounds
root_user="$(id -nu 0 2> /dev/null)"
if [ "$root_user" != "root" ]; then
    echo "  ${INFO} ${COL_YELLOW}It looks like the root user is not called 'root' - this can cause issues!${COL_NC}"

    echo "  ${INFO} ${COL_BOLD}Correcting username in crontab file...${COL_NC}"
    sed "s/ root / $root_user /g" -i /opt/etc/cron.d/pihole

    separator="### Pi-hole crontab - do not modify ###"
    if grep -Fq "$separator" "/opt/var/spool/cron/crontabs/$root_user" 2> /dev/null; then
        echo "  ${INFO} ${COL_BOLD}Crontab workaround is no longer required, removing it...${COL_NC}"
        sed "/$separator/,/$separator/d" -i "/opt/var/spool/cron/crontabs/$root_user"
    fi
fi

# Add a password for the web interface for new installs
if [ ! -f /opt/etc/pihole/pihole.toml ] || grep -Fq 'This file will be rewritten' /opt/etc/pihole/pihole.toml; then
    new_password=$(tr -dc _A-Z-a-z-0-9 </dev/urandom | head -c 8)
    pihole setpassword "$new_password" > /dev/null

    echo "  ${INFO} ${COL_LIGHT_GREEN}Generated password for the web interface: $new_password${COL_NC}"
    echo "  ${INFO} ${COL_BOLD}It can be changed using 'pihole setpassword' command.${COL_NC}"
elif [ -z "$(pihole-FTL --config -q webserver.api.pwhash)" ]; then # or show a warning if the password is not set
    echo "  ${INFO} ${COL_LIGHT_RED}Password for the web interface is not set - this is a security risk!${COL_NC}"
    echo "  ${INFO} ${COL_BOLD}Please set it using 'pihole setpassword' command.${COL_NC}"
fi

# Gravity database file path
gravitydb_file="$(pihole-FTL --config -q files.gravity)"

# Upgrade existing gravity database
if [ -n "$gravitydb_file" ] && [ -f "$gravitydb_file" ]; then
    gravitydb_version="$(gravitydb_version "$gravitydb_file")"
    bash /opt/share/pihole/gravity.sh --upgrade

    # Force update gravity if database version has changed
    [ "$(gravitydb_version "$gravitydb_file")" != "$gravitydb_version" ] && gravitydb_upgraded=true
fi

# Restart the service if it's already running
if /opt/etc/init.d/S65pihole-FTL check | grep -q 'alive'; then
    run_service_action "restart"
elif [ -f /opt/tmp/pihole_was_running.tmp ]; then # or start it if it was running before
    rm -f /opt/tmp/pihole_was_running.tmp
    run_service_action "start"
fi

# Run gravity update if database was upgraded or does not exist
if [ -n "$gravitydb_upgraded" ] || { [ -n "$gravitydb_file" ] && [ ! -f "$gravitydb_file" ] ; }; then
    bash /opt/share/pihole/gravity.sh
fi

# Update remote versions via updatechecker
# We cannot execute it now because opkg is running
{
    timeout=300
    while [ -f /opt/tmp/opkg.lock ] && [ "$timeout" -gt 0 ] ; do
        timeout=$((timeout-1))
        sleep 1
    done

    sleep 15 # Wait for 15 seconds to let the system IO settle down

    bash /opt/share/pihole/updatecheck.sh
} > /dev/null 2>&1 &

exit 0
