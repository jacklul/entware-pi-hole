#!/bin/sh

# Drop caches, to make sure checks here are done on the updated files
sync
echo 3 > /proc/sys/vm/drop_caches

# Prioritize /opt binaries
PATH="/opt/sbin:/opt/bin:$PATH:/opt/share/pihole/polyfill"

# Fancy console output
if [ -f /opt/share/pihole/COL_TABLE ]; then
    #shellcheck source=../../dev/core/advanced/Scripts/COL_TABLE
    . "/opt/share/pihole/COL_TABLE"
else # fallback
    TICK="[âœ“]"
    CROSS="[âœ—]"
    INFO="[i]"
    OVER="\\r[K"
fi

random_number() {
    _base=$1
    _max=$2

    bash -c "echo \$(($_base + RANDOM % $_max))"
}

gravitydb_version() {
    pihole-FTL sqlite3 -ni "$1" "SELECT \"value\" FROM \"info\" WHERE \"property\" = 'version';" || echo 0
}

service_action() {
    case "$1" in
        "start")
            _str="Starting pihole-FTL service"
        ;;
        "restart")
            _str="Restarting pihole-FTL service"
        ;;
    esac

    if [ -n "$_str" ]; then
        printf "  %s %s..." "${INFO}" "$_str"

        if /opt/etc/init.d/S65pihole-FTL "$1" > /dev/null; then
            printf "%b  %b %s...\\n" "${OVER}" "${TICK}" "$_str"
        else
            printf "%b  %b %s...\\n" "${OVER}" "${CROSS}" "$_str"
        fi
    fi
}

##########

echo "  ${INFO} ${COL_BOLD}Running Pi-hole install tasks...${COL_NC}"

# Make links to system files if they don't exist in /opt/etc
[ ! -f /opt/etc/hosts ] && [ -f /etc/hosts ] && ln -s /etc/hosts /opt/etc/hosts && symlinks="$symlinks /opt/etc/hosts"
[ ! -f /opt/etc/ethers ] && [ -f /etc/ethers ] && ln -s /etc/ethers /opt/etc/ethers && symlinks="$symlinks /opt/etc/ethers"
[ ! -f /opt/etc/resolv.conf ] && [ -f /etc/resolv.conf ] && ln -s /etc/resolv.conf /opt/etc/resolv.conf && symlinks="$symlinks /opt/etc/resolv.conf"
[ -n "$symlinks" ] && echo "  ${INFO} Created symlinks:$symlinks"

# Set random gravity update and updatechecker times
if [ -f /opt/etc/cron.d/pihole ] && grep -q "59 1 \|59 17 " /opt/etc/cron.d/pihole; then
    echo "  ${INFO} Setting random gravity update and updatechecker times..."

    sed "s/59 1 /$(random_number 1 58) $(random_number 3 2) /" -i /opt/etc/cron.d/pihole
    sed "s/59 17 /$(random_number 1 58) $(random_number 12 8) /" -i /opt/etc/cron.d/pihole
fi

# Set user and group used for rotating the logs by logrotate
if [ -f /opt/etc/pihole/logrotate ]; then
    log_user_group="$(stat -c '%U %G' /opt/var/log)"

    if [ -n "$log_user_group" ]; then
        echo "  ${INFO} Setting user and group in logrotate file..."

        sed "s/# su #/su $log_user_group/g;" -i /opt/etc/pihole/logrotate
    fi
fi

# Show a warning when root user is not called 'root' and update the crontab file
root_user="$(id -nu 0 2> /dev/null)"
if [ "$root_user" != "root" ]; then
    echo "  ${INFO} ${COL_YELLOW}It looks like the root user is not called 'root' - this can cause issues!${COL_NC}"
    echo "  ${INFO} ${COL_BOLD}Correcting username in crontab file...${COL_NC}"

    sed "s/ root / $root_user /g" -i /opt/etc/cron.d/pihole
fi

# Check if config file exists
if [ -f /opt/etc/pihole/pihole.toml ]; then
    config_exists=true
elif [ -f /opt/share/pihole/pihole.toml.dist ]; then # Copy our starting config for new installs
    echo "  ${INFO} ${COL_BOLD}Initializing configuration file...${COL_NC}"
    cp /opt/share/pihole/pihole.toml.dist /opt/etc/pihole/pihole.toml
    chmod 0640 /opt/etc/pihole/pihole.toml
fi

# Set a password for the web interface on new installs
if [ -z "$config_exists" ]; then
    new_password=$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c 8)

    if pihole setpassword "$new_password" > /dev/null; then
        echo "  ${INFO} ${COL_LIGHT_GREEN}Generated password for the web interface: ${COL_YELLOW}$new_password${COL_NC}"
        echo "  ${INFO} ${COL_BOLD}It can be changed using 'pihole setpassword' command.${COL_NC}"
    else
        echo "  ${INFO} ${COL_LIGHT_RED}Failed to set a password for the web interface!${COL_NC}"
        no_password=true
    fi
elif [ -z "$(pihole-FTL --config -q webserver.api.pwhash)" ]; then # or show a warning if the password is not set
    echo "  ${INFO} ${COL_LIGHT_RED}Password for the web interface is not set - this is a security risk!${COL_NC}"
    no_password=true
fi

# Insist on setting the password manually
[ -n "$no_password" ] && echo "  ${INFO} ${COL_BOLD}Please set it using 'pihole setpassword' command.${COL_NC}"

# Get gravity database file path
gravitydb_file="$(pihole-FTL --config -q files.gravity)"

# Upgrade existing gravity database if needed
if [ -n "$gravitydb_file" ] && [ -f "$gravitydb_file" ]; then
    gravitydb_version="$(gravitydb_version "$gravitydb_file")"
    bash /opt/share/pihole/gravity.sh --upgrade

    # Force gravity update if database version has changed
    [ "$(gravitydb_version "$gravitydb_file")" != "$gravitydb_version" ] && gravitydb_upgraded=true

    # This file should be present only if gravity database is missing at this point
    if [ -f /opt/etc/pihole/adlists.list ]; then # Move it to location expected by Pi-hole
        [ ! -d /opt/etc/pihole/migration_backup ] && mkdir /opt/etc/pihole/migration_backup
        mv -f /opt/etc/pihole/adlists.list /opt/etc/pihole/migration_backup/adlists.list
    fi
fi

# Check if the service is currently running
/opt/etc/init.d/S65pihole-FTL check | grep -q 'alive' && is_running=true

# Check if service was running before package upgrade
if [ -f /opt/tmp/pihole_was_running.tmp ]; then
    [ "$(cat /opt/tmp/pihole_was_running.tmp)" = "$(date '+%Y-%m-%d')" ] && was_running=true
    rm -f /opt/tmp/pihole_was_running.tmp
fi

# Restart the service if it's already running
if [ -n "$is_running" ]; then
    service_action "restart"
elif [ -n "$was_running" ]; then # or start it if it was running before
    service_action "start"
fi

# Run gravity update if database was upgraded or does not exist
if [ -n "$gravitydb_upgraded" ] || { [ -n "$gravitydb_file" ] && [ ! -f "$gravitydb_file" ] ; }; then
    bash /opt/share/pihole/gravity.sh
fi

# Perform a port check on new installs
if [ -z "$config_exists" ]; then
    dns_port="$(pihole-FTL --config -q dns.port)"
    web_ports=$(pihole-FTL --config -q webserver.port | sed 's/[^0-9,]//g' | tr ',' ' ')
    listening="$(ss --listening --numeric --tcp --udp --processes | grep -Fv '"pihole-FTL"')"
    ports_in_use=

    for port in $dns_port $web_ports; do
        echo "$listening" | grep -qF ":$port " && ports_in_use="$ports_in_use $port"
    done

    # Show a warning if something is already listening on one of the ports
    if [ -n "$ports_in_use" ]; then
        echo "  ${INFO} ${COL_LIGHT_RED}The following required ports are already in use:${COL_YELLOW}$ports_in_use${COL_NC}"
        echo "  ${INFO} ${COL_BOLD}Pi-hole will not work out of the box - configuration changes are required!${COL_NC}"
        echo "  ${INFO} ${COL_BOLD}Please see ${COL_CYAN}https://github.com/jacklul/entware-pi-hole/wiki${COL_BOLD} for help.${COL_NC}"
    fi
fi

# Update remote versions via updatechecker (/opt/etc/pihole/versions)
# We cannot execute it now because it calls opkg and it is running right now
{
    timeout=300
    while [ -f /opt/tmp/opkg.lock ] && [ "$timeout" -gt 0 ] ; do
        timeout=$((timeout-1))
        sleep 1
    done

    sleep 15 # Wait for 15 seconds to let the system IO settle down

    bash /opt/share/pihole/updatecheck.sh
} > /dev/null 2>&1 &

exit 0
