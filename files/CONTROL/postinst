#!/bin/sh

if [ -f /opt/share/pihole/COL_TABLE ]; then
    # shellcheck disable=SC1091
    . "/opt/share/pihole/COL_TABLE"
else
    TICK="[âœ“]"
    CROSS="[âœ—]"
    INFO="[i]"
    OVER="\\r[K"
fi

# Prioritize /opt binaries
PATH="/opt/sbin:/opt/bin:$PATH"

random_number() {
    _BASE=$1
    _MAX=$2

    bash -c "echo \$(($_BASE + RANDOM % $_MAX))"
}

gravitydb_version() {
    pihole-FTL sqlite3 -ni "$1" "SELECT \"value\" FROM \"info\" WHERE \"property\" = 'version';" || echo 0
}

##########

echo "  ${INFO} ${COL_BOLD}Running Pi-hole install/upgrade tasks...${COL_NC}"

# Make links to system files if they don't exist in /opt/etc
[ ! -f /opt/etc/hosts ] && [ -f /etc/hosts ] && ln -s /etc/hosts /opt/etc/hosts && SYMLINKS="$SYMLINKS /opt/etc/hosts"
[ ! -f /opt/etc/ethers ] && [ -f /etc/ethers ] && ln -s /etc/ethers /opt/etc/ethers && SYMLINKS="$SYMLINKS /opt/etc/ethers"
[ ! -f /opt/etc/resolv.conf ] && [ -f /etc/resolv.conf ] && ln -s /etc/resolv.conf /opt/etc/resolv.conf && SYMLINKS="$SYMLINKS /opt/etc/resolv.conf"
[ -n "$SYMLINKS" ] && echo "  ${INFO} Created symlinks:$SYMLINKS"

# Set random gravity update and updatechecker times
if [ -f /opt/etc/cron.d/pihole ] && grep -q "59 1 \|59 17 " /opt/etc/cron.d/pihole; then
    echo "  ${INFO} Setting random gravity update and updatechecker times..."

    sed "s/59 1 /$(random_number 1 58) $(random_number 3 2) /" -i /opt/etc/cron.d/pihole
    sed "s/59 17 /$(random_number 1 58) $(random_number 12 8) /" -i /opt/etc/cron.d/pihole
fi

# Set user and group used for rotating the logs by logrotate
if [ -f /opt/etc/pihole/logrotate ]; then
    #shellcheck disable=SC2010
    LOG_USER_GROUP="$(ls -al "/opt/var/log" | grep ' \.$' | awk '{print $3 " " $4}')"

    if [ -n "$LOG_USER_GROUP" ]; then
        echo "  ${INFO} Setting user and group in logrotate file..."

        if grep -q "# su #" /opt/etc/pihole/logrotate; then
            sed "s/# su #/su $LOG_USER_GROUP/g;" -i /opt/etc/pihole/logrotate
        else
            sed "s/su.*$/su $LOG_USER_GROUP/g;" -i /opt/etc/pihole/logrotate
        fi
    fi
fi

# Add a password for the web interface if the config file doesn't exist (new install)
if [ ! -f /opt/etc/pihole/pihole.toml ]; then
    # same code as in Pi-hole's basic-install.sh
    PASSWORD=$(tr -dc _A-Z-a-z-0-9 </dev/urandom | head -c 8)
    pihole setpassword "$PASSWORD" > /dev/null

    echo "  ${INFO} ${COL_LIGHT_GREEN}Generated password for the web interface: $PASSWORD${COL_NC}"
    echo "  ${INFO} ${COL_BOLD}It can be changed using 'pihole setpassword' command.${COL_NC}"
elif [ -z "$(pihole-FTL --config webserver.api.pwhash)" ]; then # Shown a warning if the password is not set
    echo "  ${INFO} ${COL_LIGHT_RED}Password for the web interface is not set - this is a security risk!${COL_NC}"
    echo "  ${INFO} ${COL_BOLD}Please set it using 'pihole setpassword' command.${COL_NC}"
fi

# Gravity database file path
GRAVITYDB_FILE="$(pihole-FTL --config -q files.gravity)"

# Upgrade existing gravity database
if [ -n "$GRAVITYDB_FILE" ] && [ -f "$GRAVITYDB_FILE" ]; then
    GRAVITYDB_VERSION="$(gravitydb_version "$GRAVITYDB_FILE")"
    bash /opt/share/pihole/gravity.sh --upgrade

    [ "$(gravitydb_version "$GRAVITYDB_FILE")" != "$GRAVITYDB_VERSION" ] && RUN_GRAVITY=true
fi

# Restart the service if it's already running
if /opt/etc/init.d/S55pihole-FTL check > /dev/null 2>&1 | grep -q 'alive'; then
    str="Restarting pihole-FTL service"
    printf "  %s %s..." "${INFO}" "$str"

    if /opt/etc/init.d/S55pihole-FTL restart > /dev/null; then
        printf "%b  %b %s...\\n" "${OVER}" "${TICK}" "${str}"
    else
        printf "%b  %b %s...\\n" "${OVER}" "${CROSS}" "${str}"
    fi
else # Otherwise just run the prestart script to set required permissions
    bash /opt/share/pihole/pihole-FTL-prestart.sh
fi

# Make sure gravity database exists and that
# gravity is rebuilt after database upgrade
if [ -n "$RUN_GRAVITY" ] || { [ -n "$GRAVITYDB_FILE" ] && [ ! -f "$GRAVITYDB_FILE" ] ; }; then
    bash /opt/share/pihole/gravity.sh --force
fi

# Update remote versions via updatechecker
# We cannot execute it now because opkg is running
{
    start_time=$(date +%s)
    while [ -f /opt/tmp/opkg.lock ] && [ $(( $(date +%s) - start_time )) -le 60 ]; do
        sleep 1
    done

    bash /opt/share/pihole/updatecheck.sh
} > /dev/null 2>&1 &

exit 0
