#!/bin/sh
# https://github.com/jacklul/entware-pi-hole/
#shellcheck disable=SC2034,SC1091

ENABLED=yes
PROCS=pihole-FTL
ARGS=""
PREARGS=""
DESC=$PROCS
PATH=/opt/sbin:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

logecho() {
    logger "$@"
    echo "$@"
}

install() {
    # Install missing dependencies required by scripts
    bash /opt/share/pihole/dependencies.sh "$1" || exit 1

    # Set random gravity update and updatechecker times
    # Comment/uncomment logrotate line based on binary presence
    # Set user and group for rotated log files
    bash <<EOF
if [ -f "/opt/etc/cron.d/pihole" ]; then
    sed "s/59 1 /\$((1 + RANDOM % 58)) \$((3 + RANDOM % 2)) /" -i /opt/etc/cron.d/pihole
    sed "s/59 17 /\$((1 + RANDOM % 58)) \$((12 + RANDOM % 8)) /" -i /opt/etc/cron.d/pihole

    if [ -f "\$(command -v logrotate)" ]; then
        sed '/sbin\/logrotate/s/^#//' -i /opt/etc/cron.d/pihole

        LOG_USER_GROUP="\$(stat -c '%U %G' /opt/var/log 2> /dev/null)"
        if [ -n "\$LOG_USER_GROUP" ]; then
            if grep -q "# su #" /opt/etc/pihole/logrotate; then
                sed "s/# su #/su \$LOG_USER_GROUP/g;" -i /opt/etc/pihole/logrotate
            else
                sed "s/su.*$/su \$LOG_USER_GROUP/g;" -i /opt/etc/pihole/logrotate
            fi
        fi
    else
        sed '/sbin\/logrotate/s/^/#/' -i /opt/etc/cron.d/pihole
    fi
fi
EOF

    # Make sure gravity database exists
    PI_HOLE_DBFILE="$(pihole-FTL --config -q files.gravity)"
    if [ -n "$PI_HOLE_DBFILE" ] && [ ! -f "$PI_HOLE_DBFILE" ]; then
        logecho "Creating gravity database $PI_HOLE_DBFILE..."
        pihole -g || exit 1
    fi
}

if [ -f /opt/bin/bash ]; then
    case $1 in
        install)
            install
            exit 0
        ;;
        start | restart)
            # Run install tasks silently with each start/restart
            install "silent"
        ;;
    esac

    # Execute pre start script through rc.func's PRECMD, we have to run poststop here as well for cleanup
    PRECMD="bash /opt/share/pihole/pihole-FTL-poststop.sh ; bash /opt/share/pihole/pihole-FTL-prestart.sh"
fi

if [ -f /opt/bin/id ] && [ -z "$ARGS" ] && [ -z "$PREARGS" ]; then
    ROOT_USER="$(id -nu 0)" # get username of ID 0 user

    if [ "$(id -u pihole 2> /dev/null)" != "" ]; then # use the pihole user when available
        TARGET_USER="pihole"

        if [ -f /opt/sbin/setcap ] && [ -f /opt/bin/su ]; then # attempt to start with setcap and su
            if setcap CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_NET_ADMIN,CAP_SYS_NICE,CAP_IPC_LOCK,CAP_CHOWN+eip "/opt/sbin/pihole-FTL"; then
                TARGET_USER=""
                PREARGS="su -s sh -c"
                ARGS="pihole"
            fi
        fi

        if [ -n "$TARGET_USER" ]; then
            ARGS="-- -u $TARGET_USER"
            logecho "Starting pihole-FTL as '$ROOT_USER' (then dropping to '$TARGET_USER') because setting capabilities is not supported on this system"
        fi
    else
        ARGS="-- -u $ROOT_USER"
        logecho "Starting pihole-FTL as '$TARGET_USER' because 'pihole' user does not exist"
    fi
fi

. /opt/etc/init.d/rc.func

if [ -f /opt/bin/bash ]; then
    case $1 in
        stop | kill)
            # Run poststop when stopping by user
            bash /opt/share/pihole/pihole-FTL-poststop.sh
        ;;
    esac
fi
