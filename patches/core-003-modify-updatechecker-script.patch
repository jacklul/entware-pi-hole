diff --git a/advanced/Scripts/updatecheck.sh b/advanced/Scripts/updatecheck.sh
index eda6c40..291f43e 100755
--- a/advanced/Scripts/updatecheck.sh
+++ b/advanced/Scripts/updatecheck.sh
@@ -34,6 +34,35 @@ function get_remote_version() {
     fi
 }
 
+function get_remote_version_entware() {
+    local package="pi-hole"
+    [ -n "$(opkg list-installed pi-hole-dev)" ] && package="pi-hole-dev"
+
+    if [ "${package}" = "pi-hole" ]; then
+        # shellcheck disable=SC2155
+        local latest_release="$(curl -s "https://api.github.com/repos/jacklul/entware-pi-hole/releases/latest" | jq --raw-output .tag_name)"
+
+        if [ -n "${latest_release}" ] && [ "${latest_release}" != "null" ]; then
+            echo "${latest_release}"
+            return
+        fi
+    fi
+
+    # shellcheck disable=SC2155
+    local architecture="$(opkg print-architecture | grep -v " all " | awk '{print $2}')"
+    # shellcheck disable=SC2155
+    local packages_index="$(curl -s "https://jacklul.github.io/entware-pi-hole/${architecture}/Packages")"
+    # shellcheck disable=SC2155
+    local latest_package="$(echo "${packages_index}" | awk -v pkg="${package}" '$0 ~ "^Package: " pkg "$", $0 ~ "Version:" {if ($0 ~ "Version:") print $2}')"
+
+    if [ -n "${latest_package}" ]; then
+        echo "${latest_package}"
+        return
+    fi
+
+    echo "null"
+}
+
 function get_remote_hash() {
     git ls-remote "https://github.com/pi-hole/${1}" --tags "${2}" | awk '{print substr($0, 1,8);}' || return 1
 }
@@ -60,21 +68,32 @@ if [[ ! "${DOCKER_TAG}" =~ $regex ]]; then
     unset DOCKER_TAG
 fi
 
+# check if running in Entware
+IS_ENTWARE=$([ -f /opt/etc/opkg.conf ] && echo true || echo false)
+
 # used in cronjob
 if [[ "$1" == "reboot" ]]; then
     sleep 30
 fi
 
+# load current versions when running in Entware since we don't have locally cloned repos in this case
+if $IS_ENTWARE && [ -f "${VERSION_FILE}" ]; then
+    # shellcheck disable=SC1090
+    . "${VERSION_FILE}"
+fi
+
 # get Core versions
 
-CORE_VERSION="$(get_local_version /opt/etc/.pihole)"
-addOrEditKeyValPair "${VERSION_FILE}" "CORE_VERSION" "${CORE_VERSION}"
+if ! $IS_ENTWARE; then
+    CORE_VERSION="$(get_local_version /opt/etc/.pihole)"
+    addOrEditKeyValPair "${VERSION_FILE}" "CORE_VERSION" "${CORE_VERSION}"
 
-CORE_BRANCH="$(get_local_branch /opt/etc/.pihole)"
-addOrEditKeyValPair "${VERSION_FILE}" "CORE_BRANCH" "${CORE_BRANCH}"
+    CORE_BRANCH="$(get_local_branch /opt/etc/.pihole)"
+    addOrEditKeyValPair "${VERSION_FILE}" "CORE_BRANCH" "${CORE_BRANCH}"
 
-CORE_HASH="$(get_local_hash /opt/etc/.pihole)"
-addOrEditKeyValPair "${VERSION_FILE}" "CORE_HASH" "${CORE_HASH}"
+    CORE_HASH="$(get_local_hash /opt/etc/.pihole)"
+    addOrEditKeyValPair "${VERSION_FILE}" "CORE_HASH" "${CORE_HASH}"
+fi
 
 GITHUB_CORE_VERSION="$(get_remote_version pi-hole "${CORE_BRANCH}")"
 addOrEditKeyValPair "${VERSION_FILE}" "GITHUB_CORE_VERSION" "${GITHUB_CORE_VERSION}"
@@ -84,14 +103,16 @@ addOrEditKeyValPair "${VERSION_FILE}" "GITHUB_CORE_HASH" "${GITHUB_CORE_HASH}"
 
 # get Web versions
 
-WEB_VERSION="$(get_local_version /opt/share/pihole/www/admin)"
-addOrEditKeyValPair "${VERSION_FILE}" "WEB_VERSION" "${WEB_VERSION}"
+if ! $IS_ENTWARE; then
+    WEB_VERSION="$(get_local_version /opt/share/pihole/www/admin)"
+    addOrEditKeyValPair "${VERSION_FILE}" "WEB_VERSION" "${WEB_VERSION}"
 
-WEB_BRANCH="$(get_local_branch /opt/share/pihole/www/admin)"
-addOrEditKeyValPair "${VERSION_FILE}" "WEB_BRANCH" "${WEB_BRANCH}"
+    WEB_BRANCH="$(get_local_branch /opt/share/pihole/www/admin)"
+    addOrEditKeyValPair "${VERSION_FILE}" "WEB_BRANCH" "${WEB_BRANCH}"
 
-WEB_HASH="$(get_local_hash /opt/share/pihole/www/admin)"
-addOrEditKeyValPair "${VERSION_FILE}" "WEB_HASH" "${WEB_HASH}"
+    WEB_HASH="$(get_local_hash /opt/share/pihole/www/admin)"
+    addOrEditKeyValPair "${VERSION_FILE}" "WEB_HASH" "${WEB_HASH}"
+fi
 
 GITHUB_WEB_VERSION="$(get_remote_version web "${WEB_BRANCH}")"
 addOrEditKeyValPair "${VERSION_FILE}" "GITHUB_WEB_VERSION" "${GITHUB_WEB_VERSION}"
@@ -124,3 +153,13 @@ if [[ "${DOCKER_TAG}" ]]; then
     GITHUB_DOCKER_VERSION="$(get_remote_version docker-pi-hole)"
     addOrEditKeyValPair "${VERSION_FILE}" "GITHUB_DOCKER_VERSION" "${GITHUB_DOCKER_VERSION}"
 fi
+
+# get Entware package versions
+
+if $IS_ENTWARE; then
+    ENTWARE_VERSION="$(opkg list-installed pi-hole | awk '{print $3}')"
+    addOrEditKeyValPair "${VERSION_FILE}" "ENTWARE_VERSION" "${ENTWARE_VERSION}"
+
+    GITHUB_ENTWARE_VERSION="$(get_remote_version_entware)"
+    addOrEditKeyValPair "${VERSION_FILE}" "GITHUB_ENTWARE_VERSION" "${GITHUB_ENTWARE_VERSION}"
+fi
