diff --git a/advanced/Scripts/api.sh b/advanced/Scripts/api.sh
index e5eacd41..3f44c7e0 100755
--- a/advanced/Scripts/api.sh
+++ b/advanced/Scripts/api.sh
@@ -22,7 +22,7 @@ TestAPIAvailability() {
     local chaos_api_list authResponse authStatus authData apiAvailable DNSport
 
     # as we are running locally, we can get the port value from FTL directly
-    PI_HOLE_SCRIPT_DIR="/opt/pihole"
+    PI_HOLE_SCRIPT_DIR="/opt/share/pihole"
     utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
     # shellcheck source=./advanced/Scripts/utils.sh
     . "${utilsfile}"
@@ -118,8 +118,8 @@ LoginAPI() {
     fi
 
     # Try to read the CLI password (if enabled and readable by the current user)
-    if [ -r /etc/pihole/cli_pw ]; then
-        password=$(cat /etc/pihole/cli_pw)
+    if [ -r /opt/etc/pihole/cli_pw ]; then
+        password=$(cat /opt/etc/pihole/cli_pw)
 
         if [ "${1}" = "verbose" ]; then
             echo "API Authentication: Trying to use CLI password"
diff --git a/advanced/Scripts/database_migration/gravity-db.sh b/advanced/Scripts/database_migration/gravity-db.sh
index 8f84e2b0..fec93047 100755
--- a/advanced/Scripts/database_migration/gravity-db.sh
+++ b/advanced/Scripts/database_migration/gravity-db.sh
@@ -10,7 +10,7 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-readonly scriptPath="/etc/.pihole/advanced/Scripts/database_migration/gravity"
+readonly scriptPath="/opt/share/pihole/database_migration/gravity"
 
 upgrade_gravityDB(){
     local database version
diff --git a/advanced/Scripts/list.sh b/advanced/Scripts/list.sh
index 8c930f04..efb9dab1 100755
--- a/advanced/Scripts/list.sh
+++ b/advanced/Scripts/list.sh
@@ -10,8 +10,8 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-PI_HOLE_SCRIPT_DIR="/opt/pihole"
+PI_HOLE_SCRIPT_DIR="/opt/share/pihole"
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck source="./advanced/Scripts/utils.sh"
 source "${utilsfile}"
 
@@ -20,13 +20,13 @@ source "${apifile}"
 # Determine database location
 DBFILE=$(getFTLConfigValue "files.database")
 if [ -z "$DBFILE" ]; then
-    DBFILE="/etc/pihole/pihole-FTL.db"
+    DBFILE="/opt/etc/pihole/pihole-FTL.db"
 fi
 
 # Determine gravity database location
 GRAVITYDB=$(getFTLConfigValue "files.gravity")
 if [ -z "$GRAVITYDB" ]; then
-    GRAVITYDB="/etc/pihole/gravity.db"
+    GRAVITYDB="/opt/etc/pihole/gravity.db"
 fi
 
 addmode=true
@@ -38,8 +38,8 @@ domList=()
 typeId=""
 comment=""
 
-colfile="/opt/pihole/COL_TABLE"
+colfile="/opt/share/pihole/COL_TABLE"
 # shellcheck source="./advanced/Scripts/COL_TABLE"
 source ${colfile}
 
 helpFunc() {
diff --git a/advanced/Scripts/piholeNetworkFlush.sh b/advanced/Scripts/piholeNetworkFlush.sh
index a8721476..df887226 100755
--- a/advanced/Scripts/piholeNetworkFlush.sh
+++ b/advanced/Scripts/piholeNetworkFlush.sh
@@ -9,13 +9,13 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-coltable="/opt/pihole/COL_TABLE"
+coltable="/opt/share/pihole/COL_TABLE"
 if [[ -f ${coltable} ]]; then
 # shellcheck source="./advanced/Scripts/COL_TABLE"
     source ${coltable}
 fi
 
-readonly PI_HOLE_SCRIPT_DIR="/opt/pihole"
+readonly PI_HOLE_SCRIPT_DIR="/opt/share/pihole"
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck source=./advanced/Scripts/utils.sh
 source "${utilsfile}"
diff --git a/advanced/Scripts/piholeDebug.sh b/advanced/Scripts/piholeDebug.sh
index 7c558127..d2942f01 100755
--- a/advanced/Scripts/piholeDebug.sh
+++ b/advanced/Scripts/piholeDebug.sh
@@ -22,7 +22,7 @@ set -o pipefail
 ######## GLOBAL VARS ########
 # These variables would normally be next to the other files
 # but we need them to be first in order to get the colors needed for the script output
-PIHOLE_SCRIPTS_DIRECTORY="/opt/pihole"
+PIHOLE_SCRIPTS_DIRECTORY="/opt/share/pihole"
 PIHOLE_COLTABLE_FILE="${PIHOLE_SCRIPTS_DIRECTORY}/COL_TABLE"
 
 # These provide the colors we need for making the log more readable
@@ -42,7 +42,7 @@ else
 fi
 
 # shellcheck source=/dev/null
-. /etc/pihole/versions
+. /opt/etc/pihole/versions
 
 # Read the value of an FTL config key. The value is printed to stdout.
 get_ftl_conf_value() {
@@ -63,18 +63,18 @@ FORUMS_URL="${COL_CYAN}https://discourse.pi-hole.net${COL_NC}"
 
 # Directories required by Pi-hole
 # https://discourse.pi-hole.net/t/what-files-does-pi-hole-use/1684
-CORE_GIT_DIRECTORY="/etc/.pihole"
-CRON_D_DIRECTORY="/etc/cron.d"
-DNSMASQ_D_DIRECTORY="/etc/dnsmasq.d"
-PIHOLE_DIRECTORY="/etc/pihole"
-PIHOLE_SCRIPTS_DIRECTORY="/opt/pihole"
-BIN_DIRECTORY="/usr/local/bin"
-LOG_DIRECTORY="/var/log/pihole"
+CORE_GIT_DIRECTORY="/opt/etc/.pihole"
+CRON_D_DIRECTORY="/opt/etc/cron.d"
+DNSMASQ_D_DIRECTORY="/opt/etc/dnsmasq.d"
+PIHOLE_DIRECTORY="/opt/etc/pihole"
+PIHOLE_SCRIPTS_DIRECTORY="/opt/share/pihole"
+BIN_DIRECTORY="/opt/sbin"
+LOG_DIRECTORY="/opt/var/log/pihole"
 HTML_DIRECTORY="$(get_ftl_conf_value "webserver.paths.webroot")"
 WEBHOME_PATH="$(get_ftl_conf_value "webserver.paths.webhome")"
 WEB_GIT_DIRECTORY="${HTML_DIRECTORY}${WEBHOME_PATH}"
 SHM_DIRECTORY="/dev/shm"
-ETC="/etc"
+ETC="/opt/etc"
 
 # Files required by Pi-hole
 # https://discourse.pi-hole.net/t/what-files-does-pi-hole-use/1684
@@ -139,7 +139,7 @@ show_disclaimer(){
 
 make_temporary_log() {
     # Create a random temporary file for the log
-    TEMPLOG=$(mktemp /tmp/pihole_temp.XXXXXX)
+    TEMPLOG=$(mktemp /opt/tmp/pihole_temp.XXXXXX)
     # Open handle 3 for templog
     # https://stackoverflow.com/questions/18460186/writing-outputs-to-log-file-and-console
     exec 3>"$TEMPLOG"
diff --git a/advanced/Scripts/piholeLogFlush.sh b/advanced/Scripts/piholeLogFlush.sh
index 34d96318..b4ffc79b 100755
--- a/advanced/Scripts/piholeLogFlush.sh
+++ b/advanced/Scripts/piholeLogFlush.sh
@@ -8,38 +8,38 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-colfile="/opt/pihole/COL_TABLE"
+colfile="/opt/share/pihole/COL_TABLE"
 # shellcheck source="./advanced/Scripts/COL_TABLE"
 source ${colfile}
 
-readonly PI_HOLE_SCRIPT_DIR="/opt/pihole"
+readonly PI_HOLE_SCRIPT_DIR="/opt/share/pihole"
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck source="./advanced/Scripts/utils.sh"
 source "${utilsfile}"
 
 # In case we're running at the same time as a system logrotate, use a
 # separate logrotate state file to prevent stepping on each other's
 # toes.
-STATEFILE="/var/lib/logrotate/pihole"
+STATEFILE="/opt/etc/pihole/logrotate.state"
 
 # Determine database location
 DBFILE=$(getFTLConfigValue "files.database")
 if [ -z "$DBFILE" ]; then
-    DBFILE="/etc/pihole/pihole-FTL.db"
+    DBFILE="/opt/etc/pihole/pihole-FTL.db"
 fi
 
 # Determine log file location
 LOGFILE=$(getFTLConfigValue "files.log.dnsmasq")
 if [ -z "$LOGFILE" ]; then
-    LOGFILE="/var/log/pihole/pihole.log"
+    LOGFILE="/opt/var/log/pihole/pihole.log"
 fi
 FTLFILE=$(getFTLConfigValue "files.log.ftl")
 if [ -z "$FTLFILE" ]; then
-    FTLFILE="/var/log/pihole/FTL.log"
+    FTLFILE="/opt/var/log/pihole/FTL.log"
 fi
 WEBFILE=$(getFTLConfigValue "files.log.webserver")
 if [ -z "$WEBFILE" ]; then
-    WEBFILE="/var/log/pihole/webserver.log"
+    WEBFILE="/opt/var/log/pihole/webserver.log"
 fi
 
 # Helper function to handle log rotation for a single file
@@ -78,14 +78,14 @@ flush_log() {
 
 if [[ "$*" == *"once"* ]]; then
     # Nightly logrotation
-    if command -v /usr/sbin/logrotate >/dev/null; then
+    if command -v /opt/sbin/logrotate >/dev/null; then
         # Logrotate once
 
         if [[ "$*" != *"quiet"* ]]; then
             echo -ne "  ${INFO} Running logrotate ..."
         fi
         mkdir -p "${STATEFILE%/*}"
-        /usr/sbin/logrotate --force --state "${STATEFILE}" /etc/pihole/logrotate
+        /opt/sbin/logrotate --force --state "${STATEFILE}" /opt/etc/pihole/logrotate
     else
         # Handle rotation for each log file
         rotate_log "${LOGFILE}"
diff --git a/advanced/Scripts/query.sh b/advanced/Scripts/query.sh
index 3340bdd2..a2b5802d 100755
--- a/advanced/Scripts/query.sh
+++ b/advanced/Scripts/query.sh
@@ -15,14 +15,14 @@
 # Please see LICENSE file for your rights under this license.
 
 # Globals
-PI_HOLE_INSTALL_DIR="/opt/pihole"
+PI_HOLE_INSTALL_DIR="/opt/share/pihole"
 max_results="20"
 partial="false"
 domain=""
 
 # Source color table
-colfile="/opt/pihole/COL_TABLE"
+colfile="/opt/share/pihole/COL_TABLE"
 # shellcheck source="./advanced/Scripts/COL_TABLE"
 . "${colfile}"
 
 # Source api functions
diff --git a/advanced/Scripts/updatecheck.sh b/advanced/Scripts/updatecheck.sh
index b325ee9c..c1efe13b 100755
--- a/advanced/Scripts/updatecheck.sh
+++ b/advanced/Scripts/updatecheck.sh
@@ -40,18 +40,18 @@ function get_remote_hash() {
 
 # Source the utils file for addOrEditKeyValPair()
 # shellcheck source="./advanced/Scripts/utils.sh"
-. /opt/pihole/utils.sh
+. /opt/share/pihole/utils.sh
 
 ADMIN_INTERFACE_DIR=$(getFTLConfigValue "webserver.paths.webroot")$(getFTLConfigValue "webserver.paths.webhome")
 readonly ADMIN_INTERFACE_DIR
 
 # Remove the below three legacy files if they exist
-rm -f "/etc/pihole/GitHubVersions"
-rm -f "/etc/pihole/localbranches"
-rm -f "/etc/pihole/localversions"
+rm -f "/opt/etc/pihole/GitHubVersions"
+rm -f "/opt/etc/pihole/localbranches"
+rm -f "/opt/etc/pihole/localversions"
 
 # Create new versions file if it does not exist
-VERSION_FILE="/etc/pihole/versions"
+VERSION_FILE="/opt/etc/pihole/versions"
 touch "${VERSION_FILE}"
 chmod 644 "${VERSION_FILE}"
 
@@ -68,13 +68,13 @@ fi
 
 # get Core versions
 
-CORE_VERSION="$(get_local_version /etc/.pihole)"
+CORE_VERSION="$(get_local_version /opt/etc/.pihole)"
 addOrEditKeyValPair "${VERSION_FILE}" "CORE_VERSION" "${CORE_VERSION}"
 
-CORE_BRANCH="$(get_local_branch /etc/.pihole)"
+CORE_BRANCH="$(get_local_branch /opt/etc/.pihole)"
 addOrEditKeyValPair "${VERSION_FILE}" "CORE_BRANCH" "${CORE_BRANCH}"
 
-CORE_HASH="$(get_local_hash /etc/.pihole)"
+CORE_HASH="$(get_local_hash /opt/etc/.pihole)"
 addOrEditKeyValPair "${VERSION_FILE}" "CORE_HASH" "${CORE_HASH}"
 
 GITHUB_CORE_VERSION="$(get_remote_version pi-hole "${CORE_BRANCH}")"
diff --git a/advanced/Scripts/version.sh b/advanced/Scripts/version.sh
index 2b0883af..f1f2fa22 100755
--- a/advanced/Scripts/version.sh
+++ b/advanced/Scripts/version.sh
@@ -13,12 +13,12 @@
 # Please see LICENSE file for your rights under this license.
 
 # Source the versions file populated by updatechecker.sh
-cachedVersions="/etc/pihole/versions"
+cachedVersions="/opt/etc/pihole/versions"
 
 if [ -f ${cachedVersions} ]; then
     # shellcheck source=/dev/null
     . "$cachedVersions"
 else
-    echo "Could not find /etc/pihole/versions. Running update now."
+    echo "Could not find /opt/etc/pihole/versions. Running update now."
     pihole updatechecker
      # shellcheck source=/dev/null
diff --git a/advanced/Templates/gravity_copy.sql b/advanced/Templates/gravity_copy.sql
index ed11b61a..b27bd6e5 100644
--- a/advanced/Templates/gravity_copy.sql
+++ b/advanced/Templates/gravity_copy.sql
@@ -1,6 +1,6 @@
 .timeout 30000
 
-ATTACH DATABASE '/etc/pihole/gravity.db' AS OLD;
+ATTACH DATABASE '/opt/etc/pihole/gravity.db' AS OLD;
 
 BEGIN TRANSACTION;
 
diff --git a/advanced/Templates/logrotate b/advanced/Templates/logrotate
index 9e52776b..17eb150d 100644
--- a/advanced/Templates/logrotate
+++ b/advanced/Templates/logrotate
@@ -1,4 +1,4 @@
-/var/log/pihole/pihole.log {
+/opt/var/log/pihole/pihole.log {
     # su #
     daily
     copytruncate
@@ -9,7 +9,7 @@
     nomail
 }
 
-/var/log/pihole/FTL.log {
+/opt/var/log/pihole/FTL.log {
     # su #
     weekly
     copytruncate
@@ -20,7 +20,7 @@
     nomail
 }
 
-/var/log/pihole/webserver.log {
+/opt/var/log/pihole/webserver.log {
     # su #
     weekly
     copytruncate
diff --git a/advanced/Templates/pihole-FTL-poststop.sh b/advanced/Templates/pihole-FTL-poststop.sh
index b5ddbc97..4d7a10e3 100755
--- a/advanced/Templates/pihole-FTL-poststop.sh
+++ b/advanced/Templates/pihole-FTL-poststop.sh
@@ -1,6 +1,6 @@
 #!/usr/bin/env sh
 
 # Source utils.sh for getFTLConfigValue()
-PI_HOLE_SCRIPT_DIR='/opt/pihole'
+PI_HOLE_SCRIPT_DIR='/opt/share/pihole'
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck source="./advanced/Scripts/utils.sh"
@@ -10,4 +10,4 @@ utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 FTL_PID_FILE="$(getFTLConfigValue files.pid)"
 
 # Cleanup
-rm -f /run/pihole/FTL.sock /dev/shm/FTL-* "${FTL_PID_FILE}"
+rm -f /opt/var/run/pihole/FTL.sock /dev/shm/FTL-* "${FTL_PID_FILE}"
diff --git a/advanced/Templates/pihole-FTL-prestart.sh b/advanced/Templates/pihole-FTL-prestart.sh
index c604d5d4..a6e9274d 100755
--- a/advanced/Templates/pihole-FTL-prestart.sh
+++ b/advanced/Templates/pihole-FTL-prestart.sh
@@ -1,6 +1,6 @@
 #!/usr/bin/env sh
 
 # Source utils.sh for getFTLConfigValue()
-PI_HOLE_SCRIPT_DIR='/opt/pihole'
+PI_HOLE_SCRIPT_DIR='/opt/share/pihole'
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck source="./advanced/Scripts/utils.sh"
@@ -10,25 +10,25 @@ utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 FTL_PID_FILE="$(getFTLConfigValue files.pid)"
 
 # Ensure that permissions are set so that pihole-FTL can edit all necessary files
-mkdir -p /var/log/pihole
-chown -R pihole:pihole /etc/pihole/ /var/log/pihole/
+mkdir -p /opt/var/log/pihole
+chown -R pihole:pihole /opt/etc/pihole/ /opt/var/log/pihole/
 
 # allow all users read version file (and use pihole -v)
-chmod 0644 /etc/pihole/versions
+chmod 0644 /opt/etc/pihole/versions

 # allow pihole to access subdirs in /etc/pihole (sets execution bit on dirs)
-find /etc/pihole/ /var/log/pihole/ -type d -exec chmod 0755 {} +
+find /opt/etc/pihole/ /opt/var/log/pihole/ -type d -exec chmod 0755 {} +
 # Set all files (except TLS-related ones) to u+rw g+r
-find /etc/pihole/ /var/log/pihole/ -type f ! \( -name '*.pem' -o -name '*.crt' \) -exec chmod 0640 {} +
+find /opt/etc/pihole/ /opt/var/log/pihole/ -type f ! \( -name '*.pem' -o -name '*.crt' \) -exec chmod 0640 {} +
 # Set TLS-related files to a more restrictive u+rw *only* (they may contain private keys)
-find /etc/pihole/ -type f \( -name '*.pem' -o -name '*.crt' \) -exec chmod 0600 {} +
+find /opt/etc/pihole/ -type f \( -name '*.pem' -o -name '*.crt' \) -exec chmod 0600 {} +
 
 # Logrotate config file need to be owned by root
-chown root:root /etc/pihole/logrotate
+chown root:root /opt/etc/pihole/logrotate
 
 # Touch files to ensure they exist (create if non-existing, preserve if existing)
 [ -f "${FTL_PID_FILE}" ] || install -D -m 644 -o pihole -g pihole /dev/null "${FTL_PID_FILE}"
-[ -f /var/log/pihole/FTL.log ] || install -m 640 -o pihole -g pihole /dev/null /var/log/pihole/FTL.log
-[ -f /var/log/pihole/pihole.log ] || install -m 640 -o pihole -g pihole /dev/null /var/log/pihole/pihole.log
-[ -f /var/log/pihole/webserver.log ] || install -m 640 -o pihole -g pihole /dev/null /var/log/pihole/webserver.log
-[ -f /etc/pihole/dhcp.leases ] || install -m 644 -o pihole -g pihole /dev/null /etc/pihole/dhcp.leases
+[ -f /opt/var/log/pihole/FTL.log ] || install -m 640 -o pihole -g pihole /dev/null /opt/var/log/pihole/FTL.log
+[ -f /opt/var/log/pihole/pihole.log ] || install -m 640 -o pihole -g pihole /dev/null /opt/var/log/pihole/pihole.log
+[ -f /opt/var/log/pihole/webserver.log ] || install -m 640 -o pihole -g pihole /dev/null /opt/var/log/pihole/webserver.log
+[ -f /opt/etc/pihole/dhcp.leases ] || install -m 644 -o pihole -g pihole /dev/null /opt/etc/pihole/dhcp.leases
diff --git a/advanced/Templates/pihole.cron b/advanced/Templates/pihole.cron
index c62d31ab..403ffe97 100644
--- a/advanced/Templates/pihole.cron
+++ b/advanced/Templates/pihole.cron
@@ -18,16 +18,16 @@
 #          early morning. Download any updates from the adlists
 #          Squash output to log, then splat the log to stdout on error to allow for
 #          standard crontab job error handling.
-59 1    * * 7   root    PATH="$PATH:/usr/sbin:/usr/local/bin/" pihole updateGravity >/var/log/pihole/pihole_updateGravity.log || cat /var/log/pihole/pihole_updateGravity.log
+59 1    * * 7   root    PATH="$PATH:/opt/bin" pihole updateGravity >/opt/var/log/pihole/pihole_updateGravity.log || cat /opt/var/log/pihole/pihole_updateGravity.log
 
 # Pi-hole: Flush the log daily at 00:00
 #          The flush script will use logrotate if available
 #          parameter "once": logrotate only once (default is twice)
 #          parameter "quiet": don't print messages
-00 00   * * *   root    PATH="$PATH:/usr/sbin:/usr/local/bin/" pihole flush once quiet
+00 00   * * *   root    PATH="$PATH:/opt/bin" pihole flush once quiet
 
-@reboot root /usr/sbin/logrotate --state /var/lib/logrotate/pihole /etc/pihole/logrotate
+@reboot root /opt/sbin/logrotate --state /opt/etc/pihole/logrotate.state /opt/etc/pihole/logrotate
 
 # Pi-hole: Grab remote and local version every 24 hours
-59 17  * * *   root    PATH="$PATH:/usr/sbin:/usr/local/bin/" pihole updatechecker
-@reboot root    PATH="$PATH:/usr/sbin:/usr/local/bin/" pihole updatechecker reboot
+59 17  * * *   root    PATH="$PATH:/opt/bin" pihole updatechecker
+@reboot root    PATH="$PATH:/opt/bin" pihole updatechecker reboot
diff --git a/gravity.sh b/gravity.sh
index d1664394..a9adf9c0 100755
--- a/gravity.sh
+++ b/gravity.sh
@@ -13,7 +13,7 @@
 
 export LC_ALL=C
 
-PI_HOLE_SCRIPT_DIR="/opt/pihole"
+PI_HOLE_SCRIPT_DIR="/opt/share/pihole"
 # Source utils.sh for GetFTLConfigValue
 utilsfile="${PI_HOLE_SCRIPT_DIR}/utils.sh"
 # shellcheck source=./advanced/Scripts/utils.sh
@@ -23,13 +23,13 @@
 coltable="${PI_HOLE_SCRIPT_DIR}/COL_TABLE"
 # shellcheck source=./advanced/Scripts/COL_TABLE
 . "${coltable}"
 # shellcheck source=./advanced/Scripts/database_migration/gravity-db.sh
-. "/etc/.pihole/advanced/Scripts/database_migration/gravity-db.sh"
+. "/opt/share/pihole/database_migration/gravity-db.sh"
 
 basename="pihole"
-PIHOLE_COMMAND="/usr/local/bin/${basename}"
+PIHOLE_COMMAND="/opt/bin/${basename}"
 
-piholeDir="/etc/${basename}"
+piholeDir="/opt/etc/${basename}"
 
 # Gravity aux files directory
 listsCacheDir="${piholeDir}/listsCache"
@@ -36,20 +36,20 @@ blacklistFile="${piholeDir}/blacklist.txt"
 regexFile="${piholeDir}/regex.list"
 adListFile="${piholeDir}/adlists.list"
 
-piholeGitDir="/etc/.pihole"
+piholeGitDir="/opt/share/pihole"
 GRAVITYDB=$(getFTLConfigValue files.gravity)
 GRAVITY_TMPDIR=$(getFTLConfigValue files.gravity_tmp)
-gravityDBschema="${piholeGitDir}/advanced/Templates/gravity.db.sql"
-gravityDBcopy="${piholeGitDir}/advanced/Templates/gravity_copy.sql"
+gravityDBschema="${piholeGitDir}/gravity.db.sql"
+gravityDBcopy="${piholeGitDir}/gravity_copy.sql"
 
 domainsExtension="domains"
 curl_connect_timeout=10
 etag_support=false
 
 # Check gravity temp directory
 if [ ! -d "${GRAVITY_TMPDIR}" ] || [ ! -w "${GRAVITY_TMPDIR}" ]; then
-  echo -e "  ${COL_RED}Gravity temporary directory does not exist or is not a writeable directory, falling back to /tmp. ${COL_NC}"
-  GRAVITY_TMPDIR="/tmp"
+  echo -e "  ${COL_RED}Gravity temporary directory does not exist or is not a writeable directory, falling back to /opt/tmp. ${COL_NC}"
+  GRAVITY_TMPDIR="/opt/tmp"
 fi
 
 # Set this only after sourcing pihole-FTL.conf as the gravity database path may
 # have changed
diff --git a/pihole b/pihole
index 4bb7d5e5..fcc988ad 100755
--- a/pihole
+++ b/pihole
@@ -9,12 +9,12 @@
 # This file is copyright under the latest version of the EUPL.
 # Please see LICENSE file for your rights under this license.
 
-PI_HOLE_SCRIPT_DIR="/opt/pihole"
+PI_HOLE_SCRIPT_DIR="/opt/share/pihole"
 
 # PI_HOLE_BIN_DIR is not readonly here because in some functions (checkout),
 # they might get set again when the installer is sourced. This causes an
 # error due to modifying a readonly variable.
-PI_HOLE_BIN_DIR="/usr/local/bin"
+PI_HOLE_BIN_DIR="/opt/bin"
 
 readonly colfile="${PI_HOLE_SCRIPT_DIR}/COL_TABLE"
 # shellcheck source=./advanced/Scripts/COL_TABLE
@@ -26,8 +26,8 @@ # shellcheck source=./advanced/Scripts/utils.sh
 readonly apifile="${PI_HOLE_SCRIPT_DIR}/api.sh"
 # shellcheck source=./advanced/Scripts/api.sh
 source "${apifile}"
 
-versionsfile="/etc/pihole/versions"
+versionsfile="/opt/etc/pihole/versions"
 if [ -f "${versionsfile}" ]; then
     # Only source versionsfile if the file exits
     # fixes a warning during installation where versionsfile does not exist yet
@@ -113,7 +113,7 @@ repairPiholeFunc() {
   if [ -n "${DOCKER_VERSION}" ]; then
     unsupportedFunc
   else
-    /etc/.pihole/automated\ install/basic-install.sh --repair
+    /opt/share/pihole/basic-install.sh --repair
     exit 0;
   fi
 }
@@ -275,9 +275,9 @@ Example: 'pihole logging on'
 Specify whether the Pi-hole log should be used
 
 Options:
-  on                  Enable the Pi-hole log at /var/log/pihole/pihole.log
-  off                 Disable and flush the Pi-hole log at /var/log/pihole/pihole.log
-  off noflush         Disable the Pi-hole log at /var/log/pihole/pihole.log"
+  on                  Enable the Pi-hole log at /opt/var/log/pihole/pihole.log
+  off                 Disable and flush the Pi-hole log at /opt/var/log/pihole/pihole.log
+  off noflush         Disable the Pi-hole log at /opt/var/log/pihole/pihole.log"
     exit 0
   elif [[ "${1}" == "off" ]]; then
     # Disable logging
