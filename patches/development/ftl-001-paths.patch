diff --git a/src/api/action.c b/src/api/action.c
index 138c1c6c..89ac3a1d 100644
--- a/src/api/action.c
+++ b/src/api/action.c
@@ -117,7 +117,7 @@ static int run_and_stream_command(struct ftl_conn *api, const char *path, const
 
 int api_action_gravity(struct ftl_conn *api)
 {
-	return run_and_stream_command(api, "/usr/local/bin/pihole", (const char *const []){ "pihole", "-g", NULL }, "FORCE_COLOR");
+	return run_and_stream_command(api, "/opt/bin/pihole", (const char *const []){ "pihole", "-g", NULL }, "FORCE_COLOR");
 }
 
 int api_action_restartDNS(struct ftl_conn *api)
diff --git a/src/api/info.c b/src/api/info.c
index 581fc0b7..bd0d08b0 100644
--- a/src/api/info.c
+++ b/src/api/info.c
@@ -58,7 +58,7 @@
 // timer_elapsed_msec()
 #include "timers.h"
 
-#define VERSIONS_FILE "/etc/pihole/versions"
+#define VERSIONS_FILE "/opt/etc/pihole/versions"
 
 int api_info_client(struct ftl_conn *api)
 {
diff --git a/src/config/config.c b/src/config/config.c
index eee5a8c0..51c882cd 100644
--- a/src/config/config.c
+++ b/src/config/config.c
@@ -983,7 +983,7 @@ void initConfig(struct config *conf)
 	conf->webserver.tls.cert.a = cJSON_CreateStringReference("A valid TLS certificate file (*.pem)");
 	conf->webserver.tls.cert.f = FLAG_RESTART_FTL;
 	conf->webserver.tls.cert.t = CONF_STRING;
-	conf->webserver.tls.cert.d.s = (char*)"/etc/pihole/tls.pem";
+	conf->webserver.tls.cert.d.s = (char*)"/opt/etc/pihole/tls.pem";
 	conf->webserver.tls.cert.c = validate_filepath;
 
 	// sub-struct paths
@@ -1004,7 +1004,7 @@ void initConfig(struct config *conf)
 	conf->webserver.paths.webroot.a = cJSON_CreateStringReference("A valid path");
 	conf->webserver.paths.webroot.t = CONF_STRING;
 	conf->webserver.paths.webroot.f = FLAG_RESTART_FTL;
-	conf->webserver.paths.webroot.d.s = (char*)"/var/www/html";
+	conf->webserver.paths.webroot.d.s = (char*)"/opt/share/pihole/www";
 	conf->webserver.paths.webroot.c = validate_filepath;
 
 	conf->webserver.paths.webhome.k = "webserver.paths.webhome";
@@ -1161,14 +1161,14 @@ void initConfig(struct config *conf)
 	conf->files.pid.a = cJSON_CreateStringReference("Any writable file");
 	conf->files.pid.t = CONF_STRING;
 	conf->files.pid.f = FLAG_RESTART_FTL;
-	conf->files.pid.d.s = (char*)"/run/pihole-FTL.pid";
+	conf->files.pid.d.s = (char*)"/opt/var/run/pihole-FTL.pid";
 	conf->files.pid.c = validate_filepath;
 
 	conf->files.database.k = "files.database";
 	conf->files.database.h = "The location of FTL's long-term database";
 	conf->files.database.a = cJSON_CreateStringReference("Any FTL database");
 	conf->files.database.t = CONF_STRING;
-	conf->files.database.d.s = (char*)"/etc/pihole/pihole-FTL.db";
+	conf->files.database.d.s = (char*)"/opt/etc/pihole/pihole-FTL.db";
 	conf->files.database.c = validate_filepath;
 
 	conf->files.gravity.k = "files.gravity";
@@ -1176,7 +1176,7 @@ void initConfig(struct config *conf)
 	conf->files.gravity.a = cJSON_CreateStringReference("Any Pi-hole gravity database");
 	conf->files.gravity.t = CONF_STRING;
 	conf->files.gravity.f = FLAG_RESTART_FTL;
-	conf->files.gravity.d.s = (char*)"/etc/pihole/gravity.db";
+	conf->files.gravity.d.s = (char*)"/opt/etc/pihole/gravity.db";
 	conf->files.gravity.c = validate_filepath;
 
 	conf->files.gravity_tmp.k = "files.gravity_tmp";
@@ -1184,14 +1184,14 @@ void initConfig(struct config *conf)
 	conf->files.gravity_tmp.a = cJSON_CreateStringReference("Any existing world-writable writable directory");
 	conf->files.gravity_tmp.t = CONF_STRING;
 	conf->files.gravity_tmp.f = FLAG_RESTART_FTL;
-	conf->files.gravity_tmp.d.s = (char*)"/tmp";
+	conf->files.gravity_tmp.d.s = (char*)"/opt/tmp";
 	conf->files.gravity_tmp.c = validate_stub; // Only type-based checking
 
 	conf->files.macvendor.k = "files.macvendor";
 	conf->files.macvendor.h = "The database containing MAC -> Vendor information for the network table";
 	conf->files.macvendor.a = cJSON_CreateStringReference("Any Pi-hole macvendor database");
 	conf->files.macvendor.t = CONF_STRING;
-	conf->files.macvendor.d.s = (char*)"/etc/pihole/macvendor.db";
+	conf->files.macvendor.d.s = (char*)"/opt/etc/pihole/macvendor.db";
 	conf->files.macvendor.c = validate_filepath;
 
 	conf->files.pcap.k = "files.pcap";
@@ -1217,7 +1217,7 @@ void initConfig(struct config *conf)
 	conf->files.log.webserver.a = cJSON_CreateStringReference("Any writable file");
 	conf->files.log.webserver.t = CONF_STRING;
 	conf->files.log.webserver.f = FLAG_RESTART_FTL;
-	conf->files.log.webserver.d.s = (char*)"/var/log/pihole/webserver.log";
+	conf->files.log.webserver.d.s = (char*)"/opt/var/log/pihole/webserver.log";
 	conf->files.log.webserver.c = validate_filepath;
 
 	// struct misc
@@ -1225,7 +1225,7 @@ void initConfig(struct config *conf)
 	conf->files.log.dnsmasq.a = cJSON_CreateStringReference("Any writable file");
 	conf->files.log.dnsmasq.t = CONF_STRING;
 	conf->files.log.dnsmasq.f = FLAG_RESTART_FTL;
-	conf->files.log.dnsmasq.d.s = (char*)"/var/log/pihole/pihole.log";
+	conf->files.log.dnsmasq.d.s = (char*)"/opt/var/log/pihole/pihole.log";
 	conf->files.log.dnsmasq.c = validate_filepath_dash;
 
 	conf->files.log.webserver.k = "files.log.webserver";
@@ -1689,7 +1689,7 @@ bool getLogFilePath(void)
 	config.files.log.ftl.h = "The location of FTL's log file";
 	config.files.log.ftl.a = cJSON_CreateStringReference("any writable file");
 	config.files.log.ftl.t = CONF_STRING;
-	config.files.log.ftl.d.s = (char*)"/var/log/pihole/FTL.log";
+	config.files.log.ftl.d.s = (char*)"/opt/var/log/pihole/FTL.log";
 	config.files.log.ftl.v.s = config.files.log.ftl.d.s;
 	config.files.log.ftl.c = validate_filepath;
 	config.files.log.ftl.f = FLAG_FTL_LOG;
diff --git a/src/config/config.h b/src/config/config.h
index 81d4a15f..86c0a75f 100644
--- a/src/config/config.h
+++ b/src/config/config.h
@@ -28,7 +28,7 @@
 // enum web_theme
 #include "api/theme.h"
 
-#define GLOBALTOMLPATH "/etc/pihole/pihole.toml"
+#define GLOBALTOMLPATH "/opt/etc/pihole/pihole.toml"
 
 // This static string represents an unchanged password
 #define PASSWORD_VALUE "********"
@@ -37,13 +37,13 @@
 #define VALIDATOR_ERRBUF_LEN 256
 
 // Location of the legacy (pre-v6.0) config file
-#define GLOBALCONFFILE_LEGACY "/etc/pihole/pihole-FTL.conf"
+#define GLOBALCONFFILE_LEGACY "/opt/etc/pihole/pihole-FTL.conf"
 
 // Migration target for the legacy (pre-v6.0) config file
-#define MIGRATION_TARGET_V6 "/etc/pihole/migration_backup_v6"
+#define MIGRATION_TARGET_V6 "/opt/etc/pihole/migration_backup_v6"
 
 // Location of the legacy (pre-v6.0) setupVars config file
-#define SETUPVARS_CONF "/etc/pihole/setupVars.conf"
+#define SETUPVARS_CONF "/opt/etc/pihole/setupVars.conf"
 
 union conf_value {
 	bool b;                                     // boolean value
diff --git a/src/config/dnsmasq_config.c b/src/config/dnsmasq_config.c
index c50223b1..8e0700f9 100644
--- a/src/config/dnsmasq_config.c
+++ b/src/config/dnsmasq_config.c
@@ -701,13 +701,13 @@ bool __attribute__((nonnull(1,3))) write_dnsmasq_config(struct config *conf, boo
 	fputs("server=/onion/\n", pihole_conf);
 	fputs("\n", pihole_conf);
 
-	if(directory_exists("/etc/dnsmasq.d") && conf->misc.etc_dnsmasq_d.v.b)
+	if(directory_exists("/opt/etc/dnsmasq.d") && conf->misc.etc_dnsmasq_d.v.b)
 	{
 		// Load additional user configs from /etc/dnsmasq.d if the
 		// directory exists (it may not, e.g., in a container)
 		// Load only files ending in .conf
 		fputs("# Load additional user configs\n", pihole_conf);
-		fputs("conf-dir=/etc/dnsmasq.d,*.conf\n", pihole_conf);
+		fputs("conf-dir=/opt/etc/dnsmasq.d,*.conf\n", pihole_conf);
 		fputs("\n", pihole_conf);
 	}
 
diff --git a/src/config/dnsmasq_config.h b/src/config/dnsmasq_config.h
index df660790..d3866bac 100644
--- a/src/config/dnsmasq_config.h
+++ b/src/config/dnsmasq_config.h
@@ -22,14 +22,14 @@ bool read_legacy_cnames_config(void);
 bool read_legacy_custom_hosts_config(void);
 bool write_custom_list(void);
 
-#define DNSMASQ_PH_CONFIG "/etc/pihole/dnsmasq.conf"
-#define DNSMASQ_TEMP_CONF "/etc/pihole/dnsmasq.conf.temp"
+#define DNSMASQ_PH_CONFIG "/opt/etc/pihole/dnsmasq.conf"
+#define DNSMASQ_TEMP_CONF "/opt/etc/pihole/dnsmasq.conf.temp"
 #define DNSMASQ_STATIC_LEASES MIGRATION_TARGET_V6"/04-pihole-static-dhcp.conf"
 #define DNSMASQ_CNAMES MIGRATION_TARGET_V6"/05-pihole-custom-cname.conf"
-#define DNSMASQ_HOSTSDIR "/etc/pihole/hosts"
+#define DNSMASQ_HOSTSDIR "/opt/etc/pihole/hosts"
 #define DNSMASQ_CUSTOM_LIST DNSMASQ_HOSTSDIR"/custom.list"
-#define DNSMASQ_CUSTOM_LIST_LEGACY "/etc/pihole/custom.list"
+#define DNSMASQ_CUSTOM_LIST_LEGACY "/opt/etc/pihole/custom.list"
 #define DNSMASQ_CUSTOM_LIST_LEGACY_TARGET MIGRATION_TARGET_V6"/custom.list"
-#define DHCPLEASESFILE "/etc/pihole/dhcp.leases"
+#define DHCPLEASESFILE "/opt/etc/pihole/dhcp.leases"
 
 #endif //DNSMASQ_CONFIG_H
diff --git a/src/config/inotify.c b/src/config/inotify.c
index dfb3837c..9131b932 100644
--- a/src/config/inotify.c
+++ b/src/config/inotify.c
@@ -14,7 +14,7 @@
 // free()
 #include <stdlib.h>
 
-#define WATCHDIR "/etc/pihole"
+#define WATCHDIR "/opt/etc/pihole"
 
 static int inotify_fd = -1;
 static int inotify_wd = -1;
diff --git a/src/config/legacy_reader.c b/src/config/legacy_reader.c
index 8e64cfed..1e2441cb 100644
--- a/src/config/legacy_reader.c
+++ b/src/config/legacy_reader.c
@@ -67,7 +67,7 @@ bool getLogFilePathLegacy(struct config *conf, FILE *fp)
 			free(conf->files.log.ftl.v.s);
 
 		// Use standard path if no custom path was obtained from the config file
-		conf->files.log.ftl.v.s = strdup("/var/log/pihole/FTL.log");
+		conf->files.log.ftl.v.s = strdup("/opt/var/log/pihole/FTL.log");
 		conf->files.log.ftl.t = CONF_STRING_ALLOCATED;
 
 		// Test if memory allocation was successful
diff --git a/src/config/password.c b/src/config/password.c
index f90bc4ad..9c1eb759 100644
--- a/src/config/password.c
+++ b/src/config/password.c
@@ -50,7 +50,7 @@
 // sufficient access to the memory (ptrace, swapfile) would also have access to
 // the password file. Leaking the password after exit is not a concern as a new
 // password is generated on every start.
-#define CLI_PW_FILE "/etc/pihole/cli_pw"
+#define CLI_PW_FILE "/opt/etc/pihole/cli_pw"
 static char *cli_password = NULL;
 
 // Convert RAW data into hex representation
diff --git a/src/database/shell.c b/src/database/shell.c
index fc6bf5e6..73b12858 100644
--- a/src/database/shell.c
+++ b/src/database/shell.c
@@ -24598,7 +24598,7 @@ static void newTempFile(ShellState *p, const char *zSuffix){
 #ifdef _WIN32
       zTemp = "\\tmp";
 #else
-      zTemp = "/tmp";
+      zTemp = "/opt/tmp";
 #endif
     }
     p->zTempFile = sqlite3_mprintf("%s/temp%llx.%s", zTemp, r, zSuffix);
diff --git a/src/database/sqlite3.c b/src/database/sqlite3.c
index 4458f270..7f53cffc 100644
--- a/src/database/sqlite3.c
+++ b/src/database/sqlite3.c
@@ -44339,9 +44339,9 @@ static int fillInUnixFile(
 static const char *azTempDirs[] = {
   0,
   0,
-  "/var/tmp",
-  "/usr/tmp",
-  "/tmp",
+  "/opt/var/tmp",
+  "/opt/usr/tmp",
+  "/opt/tmp",
   "."
 };
 
@@ -45512,7 +45512,7 @@ static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){
     len = strlcat(lPath, "sqliteplocks", maxLen);
   }
 # else
-  len = strlcpy(lPath, "/tmp/", maxLen);
+  len = strlcpy(lPath, "/opt/tmp/", maxLen);
 # endif
 #endif
 
@@ -51455,9 +51455,9 @@ static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){
        0, /* getenv("TMP") */
        0, /* getenv("TEMP") */
        0, /* getenv("USERPROFILE") */
-       "/var/tmp",
-       "/usr/tmp",
-       "/tmp",
+       "/opt/var/tmp",
+       "/opt/usr/tmp",
+       "/opt/tmp",
        ".",
        0        /* List terminator */
     };
diff --git a/src/dnsmasq/CMakeLists.txt b/src/dnsmasq/CMakeLists.txt
index 927ed572..ac1db54c 100644
--- a/src/dnsmasq/CMakeLists.txt
+++ b/src/dnsmasq/CMakeLists.txt
@@ -64,7 +64,7 @@ set(sources
 
 add_library(dnsmasq OBJECT ${sources})
 target_compile_definitions(dnsmasq PRIVATE VERSION=\"${DNSMASQ_VERSION}\")
-target_compile_definitions(dnsmasq PRIVATE CONFFILE=\"/etc/pihole/dnsmasq.conf\")
+target_compile_definitions(dnsmasq PRIVATE CONFFILE=\"/opt/etc/pihole/dnsmasq.conf\")
 if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
     target_compile_options(dnsmasq PRIVATE -Wno-maybe-uninitialized -Wno-sign-compare)
 elseif (CMAKE_C_COMPILER_ID STREQUAL "Clang")
diff --git a/src/dnsmasq/config.h b/src/dnsmasq/config.h
index b04f964f..7e161a74 100644
--- a/src/dnsmasq/config.h
+++ b/src/dnsmasq/config.h
@@ -44,8 +44,8 @@
 #define SMALLDNAME 50 /* most domain names are smaller than this */
 #define CNAME_CHAIN 10 /* chains longer than this atr dropped for loop protection */
 #define DNSSEC_MIN_TTL 60 /* DNSKEY and DS records in cache last at least this long */
-#define HOSTSFILE "/etc/hosts"
-#define ETHERSFILE "/etc/ethers"
+#define HOSTSFILE "/opt/etc/hosts"
+#define ETHERSFILE "/opt/etc/ethers"
 #define DEFLEASE 3600 /* default DHCPv4 lease time, one hour */
 #define DEFLEASE6 (3600*24) /* default lease time for DHCPv6. One day. */
 /**** Pi-hole modification ****/
@@ -227,7 +227,7 @@ RESOLVFILE
 #   elif defined(__ANDROID__)
 #      define LEASEFILE "/data/misc/dhcp/dnsmasq.leases"
 #   else
-#      define LEASEFILE "/var/lib/misc/dnsmasq.leases"
+#      define LEASEFILE "/opt/var/lib/misc/dnsmasq.leases"
 #   endif
 #endif
 
@@ -235,7 +235,7 @@ RESOLVFILE
 #   if defined(__FreeBSD__)
 #      define CONFFILE "/usr/local/etc/dnsmasq.conf"
 #   else
-#      define CONFFILE "/etc/dnsmasq.conf"
+#      define CONFFILE "/opt/etc/dnsmasq.conf"
 #   endif
 #endif
 
@@ -243,7 +243,7 @@ RESOLVFILE
 #   if defined(__uClinux__)
 #      define RESOLVFILE "/etc/config/resolv.conf"
 #   else
-#      define RESOLVFILE "/etc/resolv.conf"
+#      define RESOLVFILE "/opt/etc/resolv.conf"
 #   endif
 #endif
 
@@ -251,7 +251,7 @@ RESOLVFILE
 #   if defined(__ANDROID__)
 #      define RUNFILE "/data/dnsmasq.pid"
 #    else
-#      define RUNFILE "/var/run/dnsmasq.pid"
+#      define RUNFILE "/opt/var/run/dnsmasq.pid"
 #    endif
 #endif
 
diff --git a/src/files.h b/src/files.h
index fc10ad23..839cde69 100644
--- a/src/files.h
+++ b/src/files.h
@@ -20,7 +20,7 @@
 #include <pwd.h>
 
 #define MAX_ROTATIONS 15
-#define BACKUP_DIR "/etc/pihole/config_backups"
+#define BACKUP_DIR "/opt/etc/pihole/config_backups"
 
 bool chmod_file(const char *filename, const mode_t mode);
 bool file_exists(const char *filename);
diff --git a/src/lua/CMakeLists.txt b/src/lua/CMakeLists.txt
index 90ddda91..20586468 100644
--- a/src/lua/CMakeLists.txt
+++ b/src/lua/CMakeLists.txt
@@ -80,7 +80,7 @@ endif()
 target_compile_definitions(lua PRIVATE LUA_USE_POSIX)
 
 # Set the default path that Lua uses to look for Lua libraries.
-target_compile_definitions(lua PRIVATE LUA_PATH_DEFAULT="/opt/pihole/libs/?.lua")
+target_compile_definitions(lua PRIVATE LUA_PATH_DEFAULT="/opt/shar/pihole/libs/?.lua")
 
 if(LUA_DL STREQUAL "true")
     target_compile_definitions(lua PRIVATE LUA_USE_DLOPEN)
diff --git a/src/lua/loslib.c b/src/lua/loslib.c
index ba80d72c..0f9c80dd 100644
--- a/src/lua/loslib.c
+++ b/src/lua/loslib.c
@@ -108,7 +108,7 @@
 #define LUA_TMPNAMBUFSIZE	32
 
 #if !defined(LUA_TMPNAMTEMPLATE)
-#define LUA_TMPNAMTEMPLATE	"/tmp/lua_XXXXXX"
+#define LUA_TMPNAMTEMPLATE	"/opt/tmp/lua_XXXXXX"
 #endif
 
 #define lua_tmpnam(b,e) { \
diff --git a/src/zip/teleporter.c b/src/zip/teleporter.c
index 47f2edc3..48410465 100644
--- a/src/zip/teleporter.c
+++ b/src/zip/teleporter.c
@@ -168,23 +168,23 @@ const char *generate_teleporter_zip(mz_zip_archive *zip, char filename[128], voi
 
 	// Add /etc/hosts to the ZIP archive
 	file_comment = "System's HOSTS file";
-	file_path = "/etc/hosts";
+	file_path = "/opt/etc/hosts";
 	if(!mz_zip_writer_add_file(zip, file_path+1, file_path, file_comment, (uint16_t)strlen(file_comment), MZ_BEST_COMPRESSION))
 	{
 		mz_zip_writer_end(zip);
-		return "Failed to add /etc/hosts to heap ZIP archive!";
+		return "Failed to add /opt/etc/hosts to heap ZIP archive!";
 	}
 
 	// Add /etc/pihole/dhcp.lease to the ZIP archive if it exists
 	file_comment = "DHCP leases file";
-	file_path = "/etc/pihole/dhcp.leases";
+	file_path = "/opt/etc/pihole/dhcp.leases";
 	if(file_exists(file_path) && !mz_zip_writer_add_file(zip, file_path+1, file_path, file_comment, (uint16_t)strlen(file_comment), MZ_BEST_COMPRESSION))
 	{
 		mz_zip_writer_end(zip);
-		return "Failed to add /etc/pihole/dhcp.leases to heap ZIP archive!";
+		return "Failed to add /opt/etc/pihole/dhcp.leases to heap ZIP archive!";
 	}
 
-	const char *directory = "/etc/dnsmasq.d";
+	const char *directory = "/opt/etc/dnsmasq.d";
 	if(directory_exists(directory))
 	{
 		// Loop over all files and add them to the ZIP archive
diff --git a/src/shmem.c b/src/shmem.c
index e1569f34..dd58d88d 100644
--- a/src/shmem.c
+++ b/src/shmem.c
@@ -1495,7 +1495,7 @@ void print_recycle_list_fullness(void)
  *
  * If the file cannot be opened for writing, an error message is logged.
  */
-#define STRING_DUMPFILE "/tmp/stringdump.txt"
+#define STRING_DUMPFILE "/opt/tmp/stringdump.txt"
 void dump_strings(void)
 {
 	// Dump string table to temporary file
